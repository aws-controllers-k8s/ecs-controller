---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  name: services.ecs.services.k8s.aws
spec:
  group: ecs.services.k8s.aws
  names:
    kind: Service
    listKind: ServiceList
    plural: services
    singular: service
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.cluster
      name: CLUSTER
      type: string
    - jsonPath: .spec.desiredCount
      name: DESIRED
      type: integer
    - jsonPath: .status.pendingCount
      name: PENDING
      type: integer
    - jsonPath: .status.runningCount
      name: RUNNING
      type: integer
    - jsonPath: .spec.name
      name: SERVICE
      type: string
    - jsonPath: .status.status
      name: STATUS
      type: string
    - jsonPath: .spec.taskDefinition
      name: TASKDEFINITION
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Service is the Schema for the Services API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              ServiceSpec defines the desired state of Service.

              Details on a service within a cluster.
            properties:
              capacityProviderStrategy:
                items:
                  description: |-
                    The details of a capacity provider strategy. A capacity provider strategy
                    can be set when using the RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)or
                    CreateCluster (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCluster.html)
                    APIs or as the default capacity provider strategy for a cluster with the
                    CreateCluster API.

                    Only capacity providers that are already associated with a cluster and have
                    an ACTIVE or UPDATING status can be used in a capacity provider strategy.
                    The PutClusterCapacityProviders (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)
                    API is used to associate a capacity provider with a cluster.

                    If specifying a capacity provider that uses an Auto Scaling group, the capacity
                    provider must already be created. New Auto Scaling group capacity providers
                    can be created with the CreateClusterCapacityProvider (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html)
                    API operation.

                    To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
                    capacity providers. The Fargate capacity providers are available to all accounts
                    and only need to be associated with a cluster to be used in a capacity provider
                    strategy.

                    With FARGATE_SPOT, you can run interruption tolerant tasks at a rate that's
                    discounted compared to the FARGATE price. FARGATE_SPOT runs tasks on spare
                    compute capacity. When Amazon Web Services needs the capacity back, your
                    tasks are interrupted with a two-minute warning. FARGATE_SPOT supports Linux
                    tasks with the X86_64 architecture on platform version 1.3.0 or later. FARGATE_SPOT
                    supports Linux tasks with the ARM64 architecture on platform version 1.4.0
                    or later.

                    A capacity provider strategy may contain a maximum of 6 capacity providers.
                  properties:
                    base:
                      format: int64
                      type: integer
                    capacityProvider:
                      type: string
                    weight:
                      format: int64
                      type: integer
                  type: object
                type: array
              cluster:
                type: string
              clusterRef:
                description: "AWSResourceReferenceWrapper provides a wrapper around
                  *AWSResourceReference\ntype to provide more user friendly syntax
                  for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                  \ name: my-api"
                properties:
                  from:
                    description: |-
                      AWSResourceReference provides all the values necessary to reference another
                      k8s resource for finding the identifier(Id/ARN/Name)
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                type: object
              deploymentConfiguration:
                description: |-
                  Optional deployment parameters that control how many tasks run during a deployment
                  and the ordering of stopping and starting tasks.
                properties:
                  alarms:
                    description: |-
                      One of the methods which provide a way for you to quickly identify when a
                      deployment has failed, and then to optionally roll back the failure to the
                      last working deployment.

                      When the alarms are generated, Amazon ECS sets the service deployment to
                      failed. Set the rollback parameter to have Amazon ECS to roll back your service
                      to the last completed deployment after a failure.

                      You can only use the DeploymentAlarms method to detect failures when the
                      DeploymentController is set to ECS (rolling update).

                      For more information, see Rolling update (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
                      in the Amazon Elastic Container Service Developer Guide .
                    properties:
                      alarmNames:
                        items:
                          type: string
                        type: array
                      enable:
                        type: boolean
                      rollback:
                        type: boolean
                    type: object
                  deploymentCircuitBreaker:
                    description: |-
                      The deployment circuit breaker can only be used for services using the rolling
                      update (ECS) deployment type.

                      The deployment circuit breaker determines whether a service deployment will
                      fail if the service can't reach a steady state. If it is turned on, a service
                      deployment will transition to a failed state and stop launching new tasks.
                      You can also configure Amazon ECS to roll back your service to the last completed
                      deployment after a failure. For more information, see Rolling update (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
                      in the Amazon Elastic Container Service Developer Guide.

                      For more information about API failure reasons, see API failure reasons (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html)
                      in the Amazon Elastic Container Service Developer Guide.
                    properties:
                      enable:
                        type: boolean
                      rollback:
                        type: boolean
                    type: object
                  maximumPercent:
                    format: int64
                    type: integer
                  minimumHealthyPercent:
                    format: int64
                    type: integer
                type: object
              deploymentController:
                description: The deployment controller to use for the service.
                properties:
                  type:
                    type: string
                type: object
              desiredCount:
                format: int64
                type: integer
              enableECSManagedTags:
                type: boolean
              enableExecuteCommand:
                type: boolean
              healthCheckGracePeriodSeconds:
                format: int64
                type: integer
              launchType:
                type: string
              loadBalancers:
                items:
                  description: |-
                    The load balancer configuration to use with a service or task set.

                    When you add, update, or remove a load balancer configuration, Amazon ECS
                    starts a new deployment with the updated Elastic Load Balancing configuration.
                    This causes tasks to register to and deregister from load balancers.

                    We recommend that you verify this on a test environment before you update
                    the Elastic Load Balancing configuration.

                    A service-linked role is required for services that use multiple target groups.
                    For more information, see Using service-linked roles (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
                    in the Amazon Elastic Container Service Developer Guide.
                  properties:
                    containerName:
                      type: string
                    containerPort:
                      format: int64
                      type: integer
                    loadBalancerName:
                      type: string
                    loadBalancerRef:
                      description: Reference field for LoadBalancerName
                      properties:
                        from:
                          description: |-
                            AWSResourceReference provides all the values necessary to reference another
                            k8s resource for finding the identifier(Id/ARN/Name)
                          properties:
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                      type: object
                    targetGroupARN:
                      type: string
                    targetGroupRef:
                      description: Reference field for TargetGroupARN
                      properties:
                        from:
                          description: |-
                            AWSResourceReference provides all the values necessary to reference another
                            k8s resource for finding the identifier(Id/ARN/Name)
                          properties:
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                      type: object
                  type: object
                type: array
              name:
                type: string
              networkConfiguration:
                description: The network configuration for a task or service.
                properties:
                  awsVPCConfiguration:
                    description: |-
                      An object representing the networking details for a task or service. For
                      example awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}.
                    properties:
                      assignPublicIP:
                        type: string
                      securityGroupRefs:
                        description: Reference field for SecurityGroups
                        items:
                          description: "AWSResourceReferenceWrapper provides a wrapper
                            around *AWSResourceReference\ntype to provide more user
                            friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                            \ name: my-api"
                          properties:
                            from:
                              description: |-
                                AWSResourceReference provides all the values necessary to reference another
                                k8s resource for finding the identifier(Id/ARN/Name)
                              properties:
                                name:
                                  type: string
                                namespace:
                                  type: string
                              type: object
                          type: object
                        type: array
                      securityGroups:
                        items:
                          type: string
                        type: array
                      subnetRefs:
                        description: Reference field for Subnets
                        items:
                          description: "AWSResourceReferenceWrapper provides a wrapper
                            around *AWSResourceReference\ntype to provide more user
                            friendly syntax for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                            \ name: my-api"
                          properties:
                            from:
                              description: |-
                                AWSResourceReference provides all the values necessary to reference another
                                k8s resource for finding the identifier(Id/ARN/Name)
                              properties:
                                name:
                                  type: string
                                namespace:
                                  type: string
                              type: object
                          type: object
                        type: array
                      subnets:
                        items:
                          type: string
                        type: array
                    type: object
                type: object
              placementConstraints:
                items:
                  description: |-
                    An object representing a constraint on task placement. For more information,
                    see Task placement constraints (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html)
                    in the Amazon Elastic Container Service Developer Guide.

                    If you're using the Fargate launch type, task placement constraints aren't
                    supported.
                  properties:
                    expression:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              placementStrategy:
                items:
                  description: |-
                    The task placement strategy for a task or service. For more information,
                    see Task placement strategies (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html)
                    in the Amazon Elastic Container Service Developer Guide.
                  properties:
                    field:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              platformVersion:
                type: string
              propagateTags:
                type: string
              role:
                type: string
              roleRef:
                description: "AWSResourceReferenceWrapper provides a wrapper around
                  *AWSResourceReference\ntype to provide more user friendly syntax
                  for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                  \ name: my-api"
                properties:
                  from:
                    description: |-
                      AWSResourceReference provides all the values necessary to reference another
                      k8s resource for finding the identifier(Id/ARN/Name)
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                type: object
              schedulingStrategy:
                type: string
              serviceConnectConfiguration:
                description: |-
                  The Service Connect configuration of your Amazon ECS service. The configuration
                  for this service to discover and connect to services, and be discovered by,
                  and connected from, other services within a namespace.

                  Tasks that run in a namespace can use short names to connect to services
                  in the namespace. Tasks can connect to services across all of the clusters
                  in the namespace. Tasks connect through a managed proxy container that collects
                  logs and metrics for increased visibility. Only the tasks that Amazon ECS
                  services create are supported with Service Connect. For more information,
                  see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                  in the Amazon Elastic Container Service Developer Guide.
                properties:
                  enabled:
                    type: boolean
                  logConfiguration:
                    description: |-
                      The log configuration for the container. This parameter maps to LogConfig
                      in the docker container create command and the --log-driver option to docker
                      run.

                      By default, containers use the same logging driver that the Docker daemon
                      uses. However, the container might use a different logging driver than the
                      Docker daemon by specifying a log driver configuration in the container definition.

                      Understand the following when specifying a log configuration for your containers.

                         * Amazon ECS currently supports a subset of the logging drivers available
                         to the Docker daemon. Additional log drivers may be available in future
                         releases of the Amazon ECS container agent. For tasks on Fargate, the
                         supported log drivers are awslogs, splunk, and awsfirelens. For tasks
                         hosted on Amazon EC2 instances, the supported log drivers are awslogs,
                         fluentd, gelf, json-file, journald,syslog, splunk, and awsfirelens.

                         * This parameter requires version 1.18 of the Docker Remote API or greater
                         on your container instance.

                         * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container
                         agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
                         environment variable before containers placed on that instance can use
                         these log configuration options. For more information, see Amazon ECS
                         container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
                         in the Amazon Elastic Container Service Developer Guide.

                         * For tasks that are on Fargate, because you don't have access to the
                         underlying infrastructure your tasks are hosted on, any additional software
                         needed must be installed outside of the task. For example, the Fluentd
                         output aggregators or a remote host running Logstash to send Gelf logs
                         to.
                    properties:
                      logDriver:
                        type: string
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      secretOptions:
                        items:
                          description: |-
                            An object representing the secret to expose to your container. Secrets can
                            be exposed to a container in the following ways:

                               * To inject sensitive data into your containers as environment variables,
                               use the secrets container definition parameter.

                               * To reference sensitive information in the log configuration of a container,
                               use the secretOptions container definition parameter.

                            For more information, see Specifying sensitive data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
                            in the Amazon Elastic Container Service Developer Guide.
                          properties:
                            name:
                              type: string
                            valueFrom:
                              type: string
                          type: object
                        type: array
                    type: object
                  namespace:
                    type: string
                  services:
                    items:
                      description: |-
                        The Service Connect service object configuration. For more information, see
                        Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                        in the Amazon Elastic Container Service Developer Guide.
                      properties:
                        clientAliases:
                          items:
                            description: |-
                              Each alias ("endpoint") is a fully-qualified name and port number that other
                              tasks ("clients") can use to connect to this service.

                              Each name and port mapping must be unique within the namespace.

                              Tasks that run in a namespace can use short names to connect to services
                              in the namespace. Tasks can connect to services across all of the clusters
                              in the namespace. Tasks connect through a managed proxy container that collects
                              logs and metrics for increased visibility. Only the tasks that Amazon ECS
                              services create are supported with Service Connect. For more information,
                              see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                              in the Amazon Elastic Container Service Developer Guide.
                            properties:
                              dnsName:
                                type: string
                              port:
                                format: int64
                                type: integer
                            type: object
                          type: array
                        discoveryName:
                          type: string
                        ingressPortOverride:
                          format: int64
                          type: integer
                        portName:
                          type: string
                        timeout:
                          description: |-
                            An object that represents the timeout configurations for Service Connect.

                            If idleTimeout is set to a time that is less than perRequestTimeout, the
                            connection will close when the idleTimeout is reached and not the perRequestTimeout.
                          properties:
                            idleTimeoutSeconds:
                              format: int64
                              type: integer
                            perRequestTimeoutSeconds:
                              format: int64
                              type: integer
                          type: object
                        tls:
                          description: The key that encrypts and decrypts your resources
                            for Service Connect TLS.
                          properties:
                            issuerCertificateAuthority:
                              description: The certificate root authority that secures
                                your service.
                              properties:
                                awsPCAAuthorityARN:
                                  type: string
                              type: object
                            kmsKey:
                              type: string
                            roleARN:
                              type: string
                          type: object
                      type: object
                    type: array
                type: object
              serviceRegistries:
                items:
                  description: |-
                    The details for the service registry.

                    Each service may be associated with one service registry. Multiple service
                    registries for each service are not supported.

                    When you add, update, or remove the service registries configuration, Amazon
                    ECS starts a new deployment. New tasks are registered and deregistered to
                    the updated service registry configuration.
                  properties:
                    containerName:
                      type: string
                    containerPort:
                      format: int64
                      type: integer
                    port:
                      format: int64
                      type: integer
                    registryARN:
                      type: string
                  type: object
                type: array
              tags:
                items:
                  description: |-
                    The metadata that you apply to a resource to help you categorize and organize
                    them. Each tag consists of a key and an optional value. You define them.

                    The following basic restrictions apply to tags:

                       * Maximum number of tags per resource - 50

                       * For each resource, each tag key must be unique, and each tag key can
                       have only one value.

                       * Maximum key length - 128 Unicode characters in UTF-8

                       * Maximum value length - 256 Unicode characters in UTF-8

                       * If your tagging schema is used across multiple services and resources,
                       remember that other services may have restrictions on allowed characters.
                       Generally allowed characters are: letters, numbers, and spaces representable
                       in UTF-8, and the following characters: + - = . _ : / @.

                       * Tag keys and values are case-sensitive.

                       * Do not use aws:, AWS:, or any upper or lowercase combination of such
                       as a prefix for either keys or values as it is reserved for Amazon Web
                       Services use. You cannot edit or delete tag keys or values with this prefix.
                       Tags with this prefix do not count against your tags per resource limit.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              taskDefinition:
                type: string
              taskDefinitionRef:
                description: "AWSResourceReferenceWrapper provides a wrapper around
                  *AWSResourceReference\ntype to provide more user friendly syntax
                  for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                  \ name: my-api"
                properties:
                  from:
                    description: |-
                      AWSResourceReference provides all the values necessary to reference another
                      k8s resource for finding the identifier(Id/ARN/Name)
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                type: object
              volumeConfigurations:
                items:
                  description: |-
                    The configuration for a volume specified in the task definition as a volume
                    that is configured at launch time. Currently, the only supported volume type
                    is an Amazon EBS volume.
                  properties:
                    managedEBSVolume:
                      description: |-
                        The configuration for the Amazon EBS volume that Amazon ECS creates and manages
                        on your behalf. These settings are used to create each Amazon EBS volume,
                        with one volume created for each task in the service. For information about
                        the supported launch types and operating systems, see Supported operating
                        systems and launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration)
                        in the Amazon Elastic Container Service Developer Guide.

                        Many of these parameters map 1:1 with the Amazon EBS CreateVolume API request
                        parameters.
                      properties:
                        encrypted:
                          type: boolean
                        filesystemType:
                          type: string
                        iops:
                          format: int64
                          type: integer
                        kmsKeyID:
                          type: string
                        roleARN:
                          type: string
                        sizeInGiB:
                          format: int64
                          type: integer
                        snapshotID:
                          type: string
                        tagSpecifications:
                          items:
                            description: The tag specifications of an Amazon EBS volume.
                            properties:
                              propagateTags:
                                type: string
                              resourceType:
                                type: string
                              tags:
                                items:
                                  description: |-
                                    The metadata that you apply to a resource to help you categorize and organize
                                    them. Each tag consists of a key and an optional value. You define them.

                                    The following basic restrictions apply to tags:

                                       * Maximum number of tags per resource - 50

                                       * For each resource, each tag key must be unique, and each tag key can
                                       have only one value.

                                       * Maximum key length - 128 Unicode characters in UTF-8

                                       * Maximum value length - 256 Unicode characters in UTF-8

                                       * If your tagging schema is used across multiple services and resources,
                                       remember that other services may have restrictions on allowed characters.
                                       Generally allowed characters are: letters, numbers, and spaces representable
                                       in UTF-8, and the following characters: + - = . _ : / @.

                                       * Tag keys and values are case-sensitive.

                                       * Do not use aws:, AWS:, or any upper or lowercase combination of such
                                       as a prefix for either keys or values as it is reserved for Amazon Web
                                       Services use. You cannot edit or delete tag keys or values with this prefix.
                                       Tags with this prefix do not count against your tags per resource limit.
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          type: array
                        throughput:
                          format: int64
                          type: integer
                        volumeType:
                          type: string
                      type: object
                    name:
                      type: string
                  type: object
                type: array
            required:
            - name
            type: object
          status:
            description: ServiceStatus defines the observed state of Service
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              clusterARN:
                description: The Amazon Resource Name (ARN) of the cluster that hosts
                  the service.
                type: string
              conditions:
                description: |-
                  All CRs managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              createdAt:
                description: The Unix timestamp for the time when the service was
                  created.
                format: date-time
                type: string
              createdBy:
                description: The principal that created the service.
                type: string
              deployments:
                description: The current state of deployments for the service.
                items:
                  description: |-
                    The details of an Amazon ECS service deployment. This is used only when a
                    service uses the ECS deployment controller type.
                  properties:
                    capacityProviderStrategy:
                      items:
                        description: |-
                          The details of a capacity provider strategy. A capacity provider strategy
                          can be set when using the RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)or
                          CreateCluster (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCluster.html)
                          APIs or as the default capacity provider strategy for a cluster with the
                          CreateCluster API.

                          Only capacity providers that are already associated with a cluster and have
                          an ACTIVE or UPDATING status can be used in a capacity provider strategy.
                          The PutClusterCapacityProviders (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)
                          API is used to associate a capacity provider with a cluster.

                          If specifying a capacity provider that uses an Auto Scaling group, the capacity
                          provider must already be created. New Auto Scaling group capacity providers
                          can be created with the CreateClusterCapacityProvider (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html)
                          API operation.

                          To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
                          capacity providers. The Fargate capacity providers are available to all accounts
                          and only need to be associated with a cluster to be used in a capacity provider
                          strategy.

                          With FARGATE_SPOT, you can run interruption tolerant tasks at a rate that's
                          discounted compared to the FARGATE price. FARGATE_SPOT runs tasks on spare
                          compute capacity. When Amazon Web Services needs the capacity back, your
                          tasks are interrupted with a two-minute warning. FARGATE_SPOT supports Linux
                          tasks with the X86_64 architecture on platform version 1.3.0 or later. FARGATE_SPOT
                          supports Linux tasks with the ARM64 architecture on platform version 1.4.0
                          or later.

                          A capacity provider strategy may contain a maximum of 6 capacity providers.
                        properties:
                          base:
                            format: int64
                            type: integer
                          capacityProvider:
                            type: string
                          weight:
                            format: int64
                            type: integer
                        type: object
                      type: array
                    createdAt:
                      format: date-time
                      type: string
                    desiredCount:
                      format: int64
                      type: integer
                    failedTasks:
                      format: int64
                      type: integer
                    id:
                      type: string
                    launchType:
                      type: string
                    networkConfiguration:
                      description: The network configuration for a task or service.
                      properties:
                        awsVPCConfiguration:
                          description: |-
                            An object representing the networking details for a task or service. For
                            example awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}.
                          properties:
                            assignPublicIP:
                              type: string
                            securityGroupRefs:
                              description: Reference field for SecurityGroups
                              items:
                                description: "AWSResourceReferenceWrapper provides
                                  a wrapper around *AWSResourceReference\ntype to
                                  provide more user friendly syntax for references
                                  using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                                  \ name: my-api"
                                properties:
                                  from:
                                    description: |-
                                      AWSResourceReference provides all the values necessary to reference another
                                      k8s resource for finding the identifier(Id/ARN/Name)
                                    properties:
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                type: object
                              type: array
                            securityGroups:
                              items:
                                type: string
                              type: array
                            subnetRefs:
                              description: Reference field for Subnets
                              items:
                                description: "AWSResourceReferenceWrapper provides
                                  a wrapper around *AWSResourceReference\ntype to
                                  provide more user friendly syntax for references
                                  using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                                  \ name: my-api"
                                properties:
                                  from:
                                    description: |-
                                      AWSResourceReference provides all the values necessary to reference another
                                      k8s resource for finding the identifier(Id/ARN/Name)
                                    properties:
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                type: object
                              type: array
                            subnets:
                              items:
                                type: string
                              type: array
                          type: object
                      type: object
                    pendingCount:
                      format: int64
                      type: integer
                    platformFamily:
                      type: string
                    platformVersion:
                      type: string
                    rolloutState:
                      type: string
                    rolloutStateReason:
                      type: string
                    runningCount:
                      format: int64
                      type: integer
                    serviceConnectConfiguration:
                      description: |-
                        The Service Connect configuration of your Amazon ECS service. The configuration
                        for this service to discover and connect to services, and be discovered by,
                        and connected from, other services within a namespace.

                        Tasks that run in a namespace can use short names to connect to services
                        in the namespace. Tasks can connect to services across all of the clusters
                        in the namespace. Tasks connect through a managed proxy container that collects
                        logs and metrics for increased visibility. Only the tasks that Amazon ECS
                        services create are supported with Service Connect. For more information,
                        see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                        in the Amazon Elastic Container Service Developer Guide.
                      properties:
                        enabled:
                          type: boolean
                        logConfiguration:
                          description: |-
                            The log configuration for the container. This parameter maps to LogConfig
                            in the docker container create command and the --log-driver option to docker
                            run.

                            By default, containers use the same logging driver that the Docker daemon
                            uses. However, the container might use a different logging driver than the
                            Docker daemon by specifying a log driver configuration in the container definition.

                            Understand the following when specifying a log configuration for your containers.

                               * Amazon ECS currently supports a subset of the logging drivers available
                               to the Docker daemon. Additional log drivers may be available in future
                               releases of the Amazon ECS container agent. For tasks on Fargate, the
                               supported log drivers are awslogs, splunk, and awsfirelens. For tasks
                               hosted on Amazon EC2 instances, the supported log drivers are awslogs,
                               fluentd, gelf, json-file, journald,syslog, splunk, and awsfirelens.

                               * This parameter requires version 1.18 of the Docker Remote API or greater
                               on your container instance.

                               * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container
                               agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
                               environment variable before containers placed on that instance can use
                               these log configuration options. For more information, see Amazon ECS
                               container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
                               in the Amazon Elastic Container Service Developer Guide.

                               * For tasks that are on Fargate, because you don't have access to the
                               underlying infrastructure your tasks are hosted on, any additional software
                               needed must be installed outside of the task. For example, the Fluentd
                               output aggregators or a remote host running Logstash to send Gelf logs
                               to.
                          properties:
                            logDriver:
                              type: string
                            options:
                              additionalProperties:
                                type: string
                              type: object
                            secretOptions:
                              items:
                                description: |-
                                  An object representing the secret to expose to your container. Secrets can
                                  be exposed to a container in the following ways:

                                     * To inject sensitive data into your containers as environment variables,
                                     use the secrets container definition parameter.

                                     * To reference sensitive information in the log configuration of a container,
                                     use the secretOptions container definition parameter.

                                  For more information, see Specifying sensitive data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
                                  in the Amazon Elastic Container Service Developer Guide.
                                properties:
                                  name:
                                    type: string
                                  valueFrom:
                                    type: string
                                type: object
                              type: array
                          type: object
                        namespace:
                          type: string
                        services:
                          items:
                            description: |-
                              The Service Connect service object configuration. For more information, see
                              Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                              in the Amazon Elastic Container Service Developer Guide.
                            properties:
                              clientAliases:
                                items:
                                  description: |-
                                    Each alias ("endpoint") is a fully-qualified name and port number that other
                                    tasks ("clients") can use to connect to this service.

                                    Each name and port mapping must be unique within the namespace.

                                    Tasks that run in a namespace can use short names to connect to services
                                    in the namespace. Tasks can connect to services across all of the clusters
                                    in the namespace. Tasks connect through a managed proxy container that collects
                                    logs and metrics for increased visibility. Only the tasks that Amazon ECS
                                    services create are supported with Service Connect. For more information,
                                    see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
                                    in the Amazon Elastic Container Service Developer Guide.
                                  properties:
                                    dnsName:
                                      type: string
                                    port:
                                      format: int64
                                      type: integer
                                  type: object
                                type: array
                              discoveryName:
                                type: string
                              ingressPortOverride:
                                format: int64
                                type: integer
                              portName:
                                type: string
                              timeout:
                                description: |-
                                  An object that represents the timeout configurations for Service Connect.

                                  If idleTimeout is set to a time that is less than perRequestTimeout, the
                                  connection will close when the idleTimeout is reached and not the perRequestTimeout.
                                properties:
                                  idleTimeoutSeconds:
                                    format: int64
                                    type: integer
                                  perRequestTimeoutSeconds:
                                    format: int64
                                    type: integer
                                type: object
                              tls:
                                description: The key that encrypts and decrypts your
                                  resources for Service Connect TLS.
                                properties:
                                  issuerCertificateAuthority:
                                    description: The certificate root authority that
                                      secures your service.
                                    properties:
                                      awsPCAAuthorityARN:
                                        type: string
                                    type: object
                                  kmsKey:
                                    type: string
                                  roleARN:
                                    type: string
                                type: object
                            type: object
                          type: array
                      type: object
                    serviceConnectResources:
                      items:
                        description: |-
                          The Service Connect resource. Each configuration maps a discovery name to
                          a Cloud Map service name. The data is stored in Cloud Map as part of the
                          Service Connect configuration for each discovery name of this Amazon ECS
                          service.

                          A task can resolve the dnsName for each of the clientAliases of a service.
                          However a task can't resolve the discovery names. If you want to connect
                          to a service, refer to the ServiceConnectConfiguration of that service for
                          the list of clientAliases that you can use.
                        properties:
                          discoveryARN:
                            type: string
                          discoveryName:
                            type: string
                        type: object
                      type: array
                    status:
                      type: string
                    taskDefinition:
                      type: string
                    updatedAt:
                      format: date-time
                      type: string
                    volumeConfigurations:
                      items:
                        description: |-
                          The configuration for a volume specified in the task definition as a volume
                          that is configured at launch time. Currently, the only supported volume type
                          is an Amazon EBS volume.
                        properties:
                          managedEBSVolume:
                            description: |-
                              The configuration for the Amazon EBS volume that Amazon ECS creates and manages
                              on your behalf. These settings are used to create each Amazon EBS volume,
                              with one volume created for each task in the service. For information about
                              the supported launch types and operating systems, see Supported operating
                              systems and launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration)
                              in the Amazon Elastic Container Service Developer Guide.

                              Many of these parameters map 1:1 with the Amazon EBS CreateVolume API request
                              parameters.
                            properties:
                              encrypted:
                                type: boolean
                              filesystemType:
                                type: string
                              iops:
                                format: int64
                                type: integer
                              kmsKeyID:
                                type: string
                              roleARN:
                                type: string
                              sizeInGiB:
                                format: int64
                                type: integer
                              snapshotID:
                                type: string
                              tagSpecifications:
                                items:
                                  description: The tag specifications of an Amazon
                                    EBS volume.
                                  properties:
                                    propagateTags:
                                      type: string
                                    resourceType:
                                      type: string
                                    tags:
                                      items:
                                        description: |-
                                          The metadata that you apply to a resource to help you categorize and organize
                                          them. Each tag consists of a key and an optional value. You define them.

                                          The following basic restrictions apply to tags:

                                             * Maximum number of tags per resource - 50

                                             * For each resource, each tag key must be unique, and each tag key can
                                             have only one value.

                                             * Maximum key length - 128 Unicode characters in UTF-8

                                             * Maximum value length - 256 Unicode characters in UTF-8

                                             * If your tagging schema is used across multiple services and resources,
                                             remember that other services may have restrictions on allowed characters.
                                             Generally allowed characters are: letters, numbers, and spaces representable
                                             in UTF-8, and the following characters: + - = . _ : / @.

                                             * Tag keys and values are case-sensitive.

                                             * Do not use aws:, AWS:, or any upper or lowercase combination of such
                                             as a prefix for either keys or values as it is reserved for Amazon Web
                                             Services use. You cannot edit or delete tag keys or values with this prefix.
                                             Tags with this prefix do not count against your tags per resource limit.
                                        properties:
                                          key:
                                            type: string
                                          value:
                                            type: string
                                        type: object
                                      type: array
                                  type: object
                                type: array
                              throughput:
                                format: int64
                                type: integer
                              volumeType:
                                type: string
                            type: object
                          name:
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              events:
                description: |-
                  The event stream for your service. A maximum of 100 of the latest events
                  are displayed.
                items:
                  description: The details for an event that's associated with a service.
                  properties:
                    createdAt:
                      format: date-time
                      type: string
                    id:
                      type: string
                    message:
                      type: string
                  type: object
                type: array
              pendingCount:
                description: The number of tasks in the cluster that are in the PENDING
                  state.
                format: int64
                type: integer
              platformFamily:
                description: |-
                  The operating system that your tasks in the service run on. A platform family
                  is specified only for tasks using the Fargate launch type.

                  All tasks that run as part of this service must use the same platformFamily
                  value as the service (for example, LINUX).
                type: string
              roleARN:
                description: |-
                  The ARN of the IAM role that's associated with the service. It allows the
                  Amazon ECS container agent to register container instances with an Elastic
                  Load Balancing load balancer.
                type: string
              runningCount:
                description: The number of tasks in the cluster that are in the RUNNING
                  state.
                format: int64
                type: integer
              status:
                description: The status of the service. The valid values are ACTIVE,
                  DRAINING, or INACTIVE.
                type: string
              taskSets:
                description: |-
                  Information about a set of Amazon ECS tasks in either an CodeDeploy or an
                  EXTERNAL deployment. An Amazon ECS task set includes details such as the
                  desired number of tasks, how many tasks are running, and whether the task
                  set serves production traffic.
                items:
                  description: |-
                    Information about a set of Amazon ECS tasks in either an CodeDeploy or an
                    EXTERNAL deployment. An Amazon ECS task set includes details such as the
                    desired number of tasks, how many tasks are running, and whether the task
                    set serves production traffic.
                  properties:
                    capacityProviderStrategy:
                      items:
                        description: |-
                          The details of a capacity provider strategy. A capacity provider strategy
                          can be set when using the RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)or
                          CreateCluster (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCluster.html)
                          APIs or as the default capacity provider strategy for a cluster with the
                          CreateCluster API.

                          Only capacity providers that are already associated with a cluster and have
                          an ACTIVE or UPDATING status can be used in a capacity provider strategy.
                          The PutClusterCapacityProviders (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)
                          API is used to associate a capacity provider with a cluster.

                          If specifying a capacity provider that uses an Auto Scaling group, the capacity
                          provider must already be created. New Auto Scaling group capacity providers
                          can be created with the CreateClusterCapacityProvider (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html)
                          API operation.

                          To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
                          capacity providers. The Fargate capacity providers are available to all accounts
                          and only need to be associated with a cluster to be used in a capacity provider
                          strategy.

                          With FARGATE_SPOT, you can run interruption tolerant tasks at a rate that's
                          discounted compared to the FARGATE price. FARGATE_SPOT runs tasks on spare
                          compute capacity. When Amazon Web Services needs the capacity back, your
                          tasks are interrupted with a two-minute warning. FARGATE_SPOT supports Linux
                          tasks with the X86_64 architecture on platform version 1.3.0 or later. FARGATE_SPOT
                          supports Linux tasks with the ARM64 architecture on platform version 1.4.0
                          or later.

                          A capacity provider strategy may contain a maximum of 6 capacity providers.
                        properties:
                          base:
                            format: int64
                            type: integer
                          capacityProvider:
                            type: string
                          weight:
                            format: int64
                            type: integer
                        type: object
                      type: array
                    clusterARN:
                      type: string
                    computedDesiredCount:
                      format: int64
                      type: integer
                    createdAt:
                      format: date-time
                      type: string
                    externalID:
                      type: string
                    id:
                      type: string
                    launchType:
                      type: string
                    loadBalancers:
                      items:
                        description: |-
                          The load balancer configuration to use with a service or task set.

                          When you add, update, or remove a load balancer configuration, Amazon ECS
                          starts a new deployment with the updated Elastic Load Balancing configuration.
                          This causes tasks to register to and deregister from load balancers.

                          We recommend that you verify this on a test environment before you update
                          the Elastic Load Balancing configuration.

                          A service-linked role is required for services that use multiple target groups.
                          For more information, see Using service-linked roles (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
                          in the Amazon Elastic Container Service Developer Guide.
                        properties:
                          containerName:
                            type: string
                          containerPort:
                            format: int64
                            type: integer
                          loadBalancerName:
                            type: string
                          loadBalancerRef:
                            description: Reference field for LoadBalancerName
                            properties:
                              from:
                                description: |-
                                  AWSResourceReference provides all the values necessary to reference another
                                  k8s resource for finding the identifier(Id/ARN/Name)
                                properties:
                                  name:
                                    type: string
                                  namespace:
                                    type: string
                                type: object
                            type: object
                          targetGroupARN:
                            type: string
                          targetGroupRef:
                            description: Reference field for TargetGroupARN
                            properties:
                              from:
                                description: |-
                                  AWSResourceReference provides all the values necessary to reference another
                                  k8s resource for finding the identifier(Id/ARN/Name)
                                properties:
                                  name:
                                    type: string
                                  namespace:
                                    type: string
                                type: object
                            type: object
                        type: object
                      type: array
                    networkConfiguration:
                      description: The network configuration for a task or service.
                      properties:
                        awsVPCConfiguration:
                          description: |-
                            An object representing the networking details for a task or service. For
                            example awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}.
                          properties:
                            assignPublicIP:
                              type: string
                            securityGroupRefs:
                              description: Reference field for SecurityGroups
                              items:
                                description: "AWSResourceReferenceWrapper provides
                                  a wrapper around *AWSResourceReference\ntype to
                                  provide more user friendly syntax for references
                                  using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                                  \ name: my-api"
                                properties:
                                  from:
                                    description: |-
                                      AWSResourceReference provides all the values necessary to reference another
                                      k8s resource for finding the identifier(Id/ARN/Name)
                                    properties:
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                type: object
                              type: array
                            securityGroups:
                              items:
                                type: string
                              type: array
                            subnetRefs:
                              description: Reference field for Subnets
                              items:
                                description: "AWSResourceReferenceWrapper provides
                                  a wrapper around *AWSResourceReference\ntype to
                                  provide more user friendly syntax for references
                                  using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                                  \ name: my-api"
                                properties:
                                  from:
                                    description: |-
                                      AWSResourceReference provides all the values necessary to reference another
                                      k8s resource for finding the identifier(Id/ARN/Name)
                                    properties:
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                type: object
                              type: array
                            subnets:
                              items:
                                type: string
                              type: array
                          type: object
                      type: object
                    pendingCount:
                      format: int64
                      type: integer
                    platformFamily:
                      type: string
                    platformVersion:
                      type: string
                    runningCount:
                      format: int64
                      type: integer
                    scale:
                      description: |-
                        A floating-point percentage of the desired number of tasks to place and keep
                        running in the task set.
                      properties:
                        unit:
                          type: string
                        value:
                          type: number
                      type: object
                    serviceARN:
                      type: string
                    serviceRegistries:
                      items:
                        description: |-
                          The details for the service registry.

                          Each service may be associated with one service registry. Multiple service
                          registries for each service are not supported.

                          When you add, update, or remove the service registries configuration, Amazon
                          ECS starts a new deployment. New tasks are registered and deregistered to
                          the updated service registry configuration.
                        properties:
                          containerName:
                            type: string
                          containerPort:
                            format: int64
                            type: integer
                          port:
                            format: int64
                            type: integer
                          registryARN:
                            type: string
                        type: object
                      type: array
                    stabilityStatus:
                      type: string
                    stabilityStatusAt:
                      format: date-time
                      type: string
                    startedBy:
                      type: string
                    status:
                      type: string
                    tags:
                      items:
                        description: |-
                          The metadata that you apply to a resource to help you categorize and organize
                          them. Each tag consists of a key and an optional value. You define them.

                          The following basic restrictions apply to tags:

                             * Maximum number of tags per resource - 50

                             * For each resource, each tag key must be unique, and each tag key can
                             have only one value.

                             * Maximum key length - 128 Unicode characters in UTF-8

                             * Maximum value length - 256 Unicode characters in UTF-8

                             * If your tagging schema is used across multiple services and resources,
                             remember that other services may have restrictions on allowed characters.
                             Generally allowed characters are: letters, numbers, and spaces representable
                             in UTF-8, and the following characters: + - = . _ : / @.

                             * Tag keys and values are case-sensitive.

                             * Do not use aws:, AWS:, or any upper or lowercase combination of such
                             as a prefix for either keys or values as it is reserved for Amazon Web
                             Services use. You cannot edit or delete tag keys or values with this prefix.
                             Tags with this prefix do not count against your tags per resource limit.
                        properties:
                          key:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    taskDefinition:
                      type: string
                    taskSetARN:
                      type: string
                    updatedAt:
                      format: date-time
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
