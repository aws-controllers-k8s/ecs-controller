// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package capacity_provider

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider, b.ko.Spec.AutoScalingGroupProvider) {
		delta.Add("Spec.AutoScalingGroupProvider", a.ko.Spec.AutoScalingGroupProvider, b.ko.Spec.AutoScalingGroupProvider)
	} else if a.ko.Spec.AutoScalingGroupProvider != nil && b.ko.Spec.AutoScalingGroupProvider != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN, b.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN) {
			delta.Add("Spec.AutoScalingGroupProvider.AutoScalingGroupARN", a.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN, b.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN)
		} else if a.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN != nil && b.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN != nil {
			if *a.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN != *b.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN {
				delta.Add("Spec.AutoScalingGroupProvider.AutoScalingGroupARN", a.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN, b.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedDraining, b.ko.Spec.AutoScalingGroupProvider.ManagedDraining) {
			delta.Add("Spec.AutoScalingGroupProvider.ManagedDraining", a.ko.Spec.AutoScalingGroupProvider.ManagedDraining, b.ko.Spec.AutoScalingGroupProvider.ManagedDraining)
		} else if a.ko.Spec.AutoScalingGroupProvider.ManagedDraining != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedDraining != nil {
			if *a.ko.Spec.AutoScalingGroupProvider.ManagedDraining != *b.ko.Spec.AutoScalingGroupProvider.ManagedDraining {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedDraining", a.ko.Spec.AutoScalingGroupProvider.ManagedDraining, b.ko.Spec.AutoScalingGroupProvider.ManagedDraining)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling) {
			delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling)
		} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod) {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod)
			} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
				if *a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != *b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod {
					delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize) {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize)
			} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
				if *a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != *b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize {
					delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize) {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize)
			} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
				if *a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != *b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize {
					delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status) {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.Status", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status)
			} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status != nil {
				if *a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status != *b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status {
					delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.Status", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity) {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity)
			} else if a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
				if *a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != *b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity {
					delta.Add("Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity", a.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity, b.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection, b.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection) {
			delta.Add("Spec.AutoScalingGroupProvider.ManagedTerminationProtection", a.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection, b.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection)
		} else if a.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection != nil && b.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection != nil {
			if *a.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection != *b.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection {
				delta.Add("Spec.AutoScalingGroupProvider.ManagedTerminationProtection", a.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection, b.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
