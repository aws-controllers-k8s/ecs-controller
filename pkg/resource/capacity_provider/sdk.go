// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package capacity_provider

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ecs"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ecs-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.CapacityProvider{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeCapacityProvidersOutput
	resp, err = rm.sdkapi.DescribeCapacityProviders(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeCapacityProviders", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "CapacityProviderNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.CapacityProviders {
		if elem.AutoScalingGroupProvider != nil {
			f0 := &svcapitypes.AutoScalingGroupProvider{}
			if elem.AutoScalingGroupProvider.AutoScalingGroupArn != nil {
				f0.AutoScalingGroupARN = elem.AutoScalingGroupProvider.AutoScalingGroupArn
			}
			if elem.AutoScalingGroupProvider.ManagedDraining != "" {
				f0.ManagedDraining = aws.String(string(elem.AutoScalingGroupProvider.ManagedDraining))
			}
			if elem.AutoScalingGroupProvider.ManagedScaling != nil {
				f0f2 := &svcapitypes.ManagedScaling{}
				if elem.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
					instanceWarmupPeriodCopy := int64(*elem.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod)
					f0f2.InstanceWarmupPeriod = &instanceWarmupPeriodCopy
				}
				if elem.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
					maximumScalingStepSizeCopy := int64(*elem.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize)
					f0f2.MaximumScalingStepSize = &maximumScalingStepSizeCopy
				}
				if elem.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
					minimumScalingStepSizeCopy := int64(*elem.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize)
					f0f2.MinimumScalingStepSize = &minimumScalingStepSizeCopy
				}
				if elem.AutoScalingGroupProvider.ManagedScaling.Status != "" {
					f0f2.Status = aws.String(string(elem.AutoScalingGroupProvider.ManagedScaling.Status))
				}
				if elem.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
					targetCapacityCopy := int64(*elem.AutoScalingGroupProvider.ManagedScaling.TargetCapacity)
					f0f2.TargetCapacity = &targetCapacityCopy
				}
				f0.ManagedScaling = f0f2
			}
			if elem.AutoScalingGroupProvider.ManagedTerminationProtection != "" {
				f0.ManagedTerminationProtection = aws.String(string(elem.AutoScalingGroupProvider.ManagedTerminationProtection))
			}
			ko.Spec.AutoScalingGroupProvider = f0
		} else {
			ko.Spec.AutoScalingGroupProvider = nil
		}
		if elem.CapacityProviderArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.CapacityProviderArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.Name != nil {
			if ko.Spec.Name != nil {
				if *elem.Name != *ko.Spec.Name {
					continue
				}
			}
			ko.Spec.Name = elem.Name
		} else {
			ko.Spec.Name = nil
		}
		if elem.Status != "" {
			ko.Status.Status = aws.String(string(elem.Status))
		} else {
			ko.Status.Status = nil
		}
		if elem.Tags != nil {
			f4 := []*svcapitypes.Tag{}
			for _, f4iter := range elem.Tags {
				f4elem := &svcapitypes.Tag{}
				if f4iter.Key != nil {
					f4elem.Key = f4iter.Key
				}
				if f4iter.Value != nil {
					f4elem.Value = f4iter.Value
				}
				f4 = append(f4, f4elem)
			}
			ko.Spec.Tags = f4
		} else {
			ko.Spec.Tags = nil
		}
		if elem.UpdateStatus != "" {
			ko.Status.UpdateStatus = aws.String(string(elem.UpdateStatus))
		} else {
			ko.Status.UpdateStatus = nil
		}
		if elem.UpdateStatusReason != nil {
			ko.Status.UpdateStatusReason = elem.UpdateStatusReason
		} else {
			ko.Status.UpdateStatusReason = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeCapacityProvidersInput, error) {
	res := &svcsdk.DescribeCapacityProvidersInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateCapacityProviderOutput
	_ = resp
	resp, err = rm.sdkapi.CreateCapacityProvider(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCapacityProvider", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.CapacityProvider.AutoScalingGroupProvider != nil {
		f0 := &svcapitypes.AutoScalingGroupProvider{}
		if resp.CapacityProvider.AutoScalingGroupProvider.AutoScalingGroupArn != nil {
			f0.AutoScalingGroupARN = resp.CapacityProvider.AutoScalingGroupProvider.AutoScalingGroupArn
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedDraining != "" {
			f0.ManagedDraining = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedDraining))
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling != nil {
			f0f2 := &svcapitypes.ManagedScaling{}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
				instanceWarmupPeriodCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod)
				f0f2.InstanceWarmupPeriod = &instanceWarmupPeriodCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
				maximumScalingStepSizeCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize)
				f0f2.MaximumScalingStepSize = &maximumScalingStepSizeCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
				minimumScalingStepSizeCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize)
				f0f2.MinimumScalingStepSize = &minimumScalingStepSizeCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.Status != "" {
				f0f2.Status = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.Status))
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
				targetCapacityCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.TargetCapacity)
				f0f2.TargetCapacity = &targetCapacityCopy
			}
			f0.ManagedScaling = f0f2
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedTerminationProtection != "" {
			f0.ManagedTerminationProtection = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedTerminationProtection))
		}
		ko.Spec.AutoScalingGroupProvider = f0
	} else {
		ko.Spec.AutoScalingGroupProvider = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CapacityProvider.CapacityProviderArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CapacityProvider.CapacityProviderArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CapacityProvider.Name != nil {
		ko.Spec.Name = resp.CapacityProvider.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.CapacityProvider.Status != "" {
		ko.Status.Status = aws.String(string(resp.CapacityProvider.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.CapacityProvider.Tags != nil {
		f4 := []*svcapitypes.Tag{}
		for _, f4iter := range resp.CapacityProvider.Tags {
			f4elem := &svcapitypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.Tags = f4
	} else {
		ko.Spec.Tags = nil
	}
	if resp.CapacityProvider.UpdateStatus != "" {
		ko.Status.UpdateStatus = aws.String(string(resp.CapacityProvider.UpdateStatus))
	} else {
		ko.Status.UpdateStatus = nil
	}
	if resp.CapacityProvider.UpdateStatusReason != nil {
		ko.Status.UpdateStatusReason = resp.CapacityProvider.UpdateStatusReason
	} else {
		ko.Status.UpdateStatusReason = nil
	}

	rm.setStatusDefaults(ko)
	// If Tags are specified, mark the resource as needing to be synced
	if ko.Spec.Tags != nil {
		// Setting Synced condition to false will trigger a requeue of the resource
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateCapacityProviderInput, error) {
	res := &svcsdk.CreateCapacityProviderInput{}

	if r.ko.Spec.AutoScalingGroupProvider != nil {
		f0 := &svcsdktypes.AutoScalingGroupProvider{}
		if r.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN != nil {
			f0.AutoScalingGroupArn = r.ko.Spec.AutoScalingGroupProvider.AutoScalingGroupARN
		}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedDraining != nil {
			f0.ManagedDraining = svcsdktypes.ManagedDraining(*r.ko.Spec.AutoScalingGroupProvider.ManagedDraining)
		}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling != nil {
			f0f2 := &svcsdktypes.ManagedScaling{}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
				instanceWarmupPeriodCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod
				if instanceWarmupPeriodCopy0 > math.MaxInt32 || instanceWarmupPeriodCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field instanceWarmupPeriod is of type int32")
				}
				instanceWarmupPeriodCopy := int32(instanceWarmupPeriodCopy0)
				f0f2.InstanceWarmupPeriod = &instanceWarmupPeriodCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
				maximumScalingStepSizeCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize
				if maximumScalingStepSizeCopy0 > math.MaxInt32 || maximumScalingStepSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field maximumScalingStepSize is of type int32")
				}
				maximumScalingStepSizeCopy := int32(maximumScalingStepSizeCopy0)
				f0f2.MaximumScalingStepSize = &maximumScalingStepSizeCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
				minimumScalingStepSizeCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize
				if minimumScalingStepSizeCopy0 > math.MaxInt32 || minimumScalingStepSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field minimumScalingStepSize is of type int32")
				}
				minimumScalingStepSizeCopy := int32(minimumScalingStepSizeCopy0)
				f0f2.MinimumScalingStepSize = &minimumScalingStepSizeCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status != nil {
				f0f2.Status = svcsdktypes.ManagedScalingStatus(*r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status)
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
				targetCapacityCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity
				if targetCapacityCopy0 > math.MaxInt32 || targetCapacityCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field targetCapacity is of type int32")
				}
				targetCapacityCopy := int32(targetCapacityCopy0)
				f0f2.TargetCapacity = &targetCapacityCopy
			}
			f0.ManagedScaling = f0f2
		}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection != nil {
			f0.ManagedTerminationProtection = svcsdktypes.ManagedTerminationProtection(*r.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection)
		}
		res.AutoScalingGroupProvider = f0
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.Tags != nil {
		f2 := []svcsdktypes.Tag{}
		for _, f2iter := range r.ko.Spec.Tags {
			f2elem := &svcsdktypes.Tag{}
			if f2iter.Key != nil {
				f2elem.Key = f2iter.Key
			}
			if f2iter.Value != nil {
				f2elem.Value = f2iter.Value
			}
			f2 = append(f2, *f2elem)
		}
		res.Tags = f2
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	// If the Tags field has changed, sync the tags with the AWS resource
	if delta.DifferentAt("Spec.Tags") {
		err := rm.syncTags(
			ctx,
			latest,
			desired,
		)
		if err != nil {
			return nil, err
		}
	}

	// If the only difference is in the Tags field, we don't need to make an update API call
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateCapacityProviderOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateCapacityProvider(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateCapacityProvider", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.CapacityProvider.AutoScalingGroupProvider != nil {
		f0 := &svcapitypes.AutoScalingGroupProvider{}
		if resp.CapacityProvider.AutoScalingGroupProvider.AutoScalingGroupArn != nil {
			f0.AutoScalingGroupARN = resp.CapacityProvider.AutoScalingGroupProvider.AutoScalingGroupArn
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedDraining != "" {
			f0.ManagedDraining = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedDraining))
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling != nil {
			f0f2 := &svcapitypes.ManagedScaling{}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
				instanceWarmupPeriodCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod)
				f0f2.InstanceWarmupPeriod = &instanceWarmupPeriodCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
				maximumScalingStepSizeCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize)
				f0f2.MaximumScalingStepSize = &maximumScalingStepSizeCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
				minimumScalingStepSizeCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize)
				f0f2.MinimumScalingStepSize = &minimumScalingStepSizeCopy
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.Status != "" {
				f0f2.Status = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.Status))
			}
			if resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
				targetCapacityCopy := int64(*resp.CapacityProvider.AutoScalingGroupProvider.ManagedScaling.TargetCapacity)
				f0f2.TargetCapacity = &targetCapacityCopy
			}
			f0.ManagedScaling = f0f2
		}
		if resp.CapacityProvider.AutoScalingGroupProvider.ManagedTerminationProtection != "" {
			f0.ManagedTerminationProtection = aws.String(string(resp.CapacityProvider.AutoScalingGroupProvider.ManagedTerminationProtection))
		}
		ko.Spec.AutoScalingGroupProvider = f0
	} else {
		ko.Spec.AutoScalingGroupProvider = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CapacityProvider.CapacityProviderArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CapacityProvider.CapacityProviderArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CapacityProvider.Name != nil {
		ko.Spec.Name = resp.CapacityProvider.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.CapacityProvider.Status != "" {
		ko.Status.Status = aws.String(string(resp.CapacityProvider.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.CapacityProvider.Tags != nil {
		f4 := []*svcapitypes.Tag{}
		for _, f4iter := range resp.CapacityProvider.Tags {
			f4elem := &svcapitypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.Tags = f4
	} else {
		ko.Spec.Tags = nil
	}
	if resp.CapacityProvider.UpdateStatus != "" {
		ko.Status.UpdateStatus = aws.String(string(resp.CapacityProvider.UpdateStatus))
	} else {
		ko.Status.UpdateStatus = nil
	}
	if resp.CapacityProvider.UpdateStatusReason != nil {
		ko.Status.UpdateStatusReason = resp.CapacityProvider.UpdateStatusReason
	} else {
		ko.Status.UpdateStatusReason = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateCapacityProviderInput, error) {
	res := &svcsdk.UpdateCapacityProviderInput{}

	if r.ko.Spec.AutoScalingGroupProvider != nil {
		f0 := &svcsdktypes.AutoScalingGroupProviderUpdate{}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedDraining != nil {
			f0.ManagedDraining = svcsdktypes.ManagedDraining(*r.ko.Spec.AutoScalingGroupProvider.ManagedDraining)
		}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling != nil {
			f0f1 := &svcsdktypes.ManagedScaling{}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod != nil {
				instanceWarmupPeriodCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.InstanceWarmupPeriod
				if instanceWarmupPeriodCopy0 > math.MaxInt32 || instanceWarmupPeriodCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field instanceWarmupPeriod is of type int32")
				}
				instanceWarmupPeriodCopy := int32(instanceWarmupPeriodCopy0)
				f0f1.InstanceWarmupPeriod = &instanceWarmupPeriodCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize != nil {
				maximumScalingStepSizeCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MaximumScalingStepSize
				if maximumScalingStepSizeCopy0 > math.MaxInt32 || maximumScalingStepSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field maximumScalingStepSize is of type int32")
				}
				maximumScalingStepSizeCopy := int32(maximumScalingStepSizeCopy0)
				f0f1.MaximumScalingStepSize = &maximumScalingStepSizeCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize != nil {
				minimumScalingStepSizeCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.MinimumScalingStepSize
				if minimumScalingStepSizeCopy0 > math.MaxInt32 || minimumScalingStepSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field minimumScalingStepSize is of type int32")
				}
				minimumScalingStepSizeCopy := int32(minimumScalingStepSizeCopy0)
				f0f1.MinimumScalingStepSize = &minimumScalingStepSizeCopy
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status != nil {
				f0f1.Status = svcsdktypes.ManagedScalingStatus(*r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.Status)
			}
			if r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity != nil {
				targetCapacityCopy0 := *r.ko.Spec.AutoScalingGroupProvider.ManagedScaling.TargetCapacity
				if targetCapacityCopy0 > math.MaxInt32 || targetCapacityCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field targetCapacity is of type int32")
				}
				targetCapacityCopy := int32(targetCapacityCopy0)
				f0f1.TargetCapacity = &targetCapacityCopy
			}
			f0.ManagedScaling = f0f1
		}
		if r.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection != nil {
			f0.ManagedTerminationProtection = svcsdktypes.ManagedTerminationProtection(*r.ko.Spec.AutoScalingGroupProvider.ManagedTerminationProtection)
		}
		res.AutoScalingGroupProvider = f0
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteCapacityProviderOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteCapacityProvider(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteCapacityProvider", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteCapacityProviderInput, error) {
	res := &svcsdk.DeleteCapacityProviderInput{}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.CapacityProvider,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterException",
		"ClientException":
		return true
	default:
		return false
	}
}
