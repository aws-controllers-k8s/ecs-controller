// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package task_definition

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if len(a.ko.Spec.ContainerDefinitions) != len(b.ko.Spec.ContainerDefinitions) {
		delta.Add("Spec.ContainerDefinitions", a.ko.Spec.ContainerDefinitions, b.ko.Spec.ContainerDefinitions)
	} else if len(a.ko.Spec.ContainerDefinitions) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.ContainerDefinitions, b.ko.Spec.ContainerDefinitions) {
			delta.Add("Spec.ContainerDefinitions", a.ko.Spec.ContainerDefinitions, b.ko.Spec.ContainerDefinitions)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CPU, b.ko.Spec.CPU) {
		delta.Add("Spec.CPU", a.ko.Spec.CPU, b.ko.Spec.CPU)
	} else if a.ko.Spec.CPU != nil && b.ko.Spec.CPU != nil {
		if *a.ko.Spec.CPU != *b.ko.Spec.CPU {
			delta.Add("Spec.CPU", a.ko.Spec.CPU, b.ko.Spec.CPU)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EphemeralStorage, b.ko.Spec.EphemeralStorage) {
		delta.Add("Spec.EphemeralStorage", a.ko.Spec.EphemeralStorage, b.ko.Spec.EphemeralStorage)
	} else if a.ko.Spec.EphemeralStorage != nil && b.ko.Spec.EphemeralStorage != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.EphemeralStorage.SizeInGiB, b.ko.Spec.EphemeralStorage.SizeInGiB) {
			delta.Add("Spec.EphemeralStorage.SizeInGiB", a.ko.Spec.EphemeralStorage.SizeInGiB, b.ko.Spec.EphemeralStorage.SizeInGiB)
		} else if a.ko.Spec.EphemeralStorage.SizeInGiB != nil && b.ko.Spec.EphemeralStorage.SizeInGiB != nil {
			if *a.ko.Spec.EphemeralStorage.SizeInGiB != *b.ko.Spec.EphemeralStorage.SizeInGiB {
				delta.Add("Spec.EphemeralStorage.SizeInGiB", a.ko.Spec.EphemeralStorage.SizeInGiB, b.ko.Spec.EphemeralStorage.SizeInGiB)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ExecutionRoleARN, b.ko.Spec.ExecutionRoleARN) {
		delta.Add("Spec.ExecutionRoleARN", a.ko.Spec.ExecutionRoleARN, b.ko.Spec.ExecutionRoleARN)
	} else if a.ko.Spec.ExecutionRoleARN != nil && b.ko.Spec.ExecutionRoleARN != nil {
		if *a.ko.Spec.ExecutionRoleARN != *b.ko.Spec.ExecutionRoleARN {
			delta.Add("Spec.ExecutionRoleARN", a.ko.Spec.ExecutionRoleARN, b.ko.Spec.ExecutionRoleARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Family, b.ko.Spec.Family) {
		delta.Add("Spec.Family", a.ko.Spec.Family, b.ko.Spec.Family)
	} else if a.ko.Spec.Family != nil && b.ko.Spec.Family != nil {
		if *a.ko.Spec.Family != *b.ko.Spec.Family {
			delta.Add("Spec.Family", a.ko.Spec.Family, b.ko.Spec.Family)
		}
	}
	if len(a.ko.Spec.InferenceAccelerators) != len(b.ko.Spec.InferenceAccelerators) {
		delta.Add("Spec.InferenceAccelerators", a.ko.Spec.InferenceAccelerators, b.ko.Spec.InferenceAccelerators)
	} else if len(a.ko.Spec.InferenceAccelerators) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.InferenceAccelerators, b.ko.Spec.InferenceAccelerators) {
			delta.Add("Spec.InferenceAccelerators", a.ko.Spec.InferenceAccelerators, b.ko.Spec.InferenceAccelerators)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IPCMode, b.ko.Spec.IPCMode) {
		delta.Add("Spec.IPCMode", a.ko.Spec.IPCMode, b.ko.Spec.IPCMode)
	} else if a.ko.Spec.IPCMode != nil && b.ko.Spec.IPCMode != nil {
		if *a.ko.Spec.IPCMode != *b.ko.Spec.IPCMode {
			delta.Add("Spec.IPCMode", a.ko.Spec.IPCMode, b.ko.Spec.IPCMode)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Memory, b.ko.Spec.Memory) {
		delta.Add("Spec.Memory", a.ko.Spec.Memory, b.ko.Spec.Memory)
	} else if a.ko.Spec.Memory != nil && b.ko.Spec.Memory != nil {
		if *a.ko.Spec.Memory != *b.ko.Spec.Memory {
			delta.Add("Spec.Memory", a.ko.Spec.Memory, b.ko.Spec.Memory)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.NetworkMode, b.ko.Spec.NetworkMode) {
		delta.Add("Spec.NetworkMode", a.ko.Spec.NetworkMode, b.ko.Spec.NetworkMode)
	} else if a.ko.Spec.NetworkMode != nil && b.ko.Spec.NetworkMode != nil {
		if *a.ko.Spec.NetworkMode != *b.ko.Spec.NetworkMode {
			delta.Add("Spec.NetworkMode", a.ko.Spec.NetworkMode, b.ko.Spec.NetworkMode)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PIDMode, b.ko.Spec.PIDMode) {
		delta.Add("Spec.PIDMode", a.ko.Spec.PIDMode, b.ko.Spec.PIDMode)
	} else if a.ko.Spec.PIDMode != nil && b.ko.Spec.PIDMode != nil {
		if *a.ko.Spec.PIDMode != *b.ko.Spec.PIDMode {
			delta.Add("Spec.PIDMode", a.ko.Spec.PIDMode, b.ko.Spec.PIDMode)
		}
	}
	if len(a.ko.Spec.PlacementConstraints) != len(b.ko.Spec.PlacementConstraints) {
		delta.Add("Spec.PlacementConstraints", a.ko.Spec.PlacementConstraints, b.ko.Spec.PlacementConstraints)
	} else if len(a.ko.Spec.PlacementConstraints) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.PlacementConstraints, b.ko.Spec.PlacementConstraints) {
			delta.Add("Spec.PlacementConstraints", a.ko.Spec.PlacementConstraints, b.ko.Spec.PlacementConstraints)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ProxyConfiguration, b.ko.Spec.ProxyConfiguration) {
		delta.Add("Spec.ProxyConfiguration", a.ko.Spec.ProxyConfiguration, b.ko.Spec.ProxyConfiguration)
	} else if a.ko.Spec.ProxyConfiguration != nil && b.ko.Spec.ProxyConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ProxyConfiguration.ContainerName, b.ko.Spec.ProxyConfiguration.ContainerName) {
			delta.Add("Spec.ProxyConfiguration.ContainerName", a.ko.Spec.ProxyConfiguration.ContainerName, b.ko.Spec.ProxyConfiguration.ContainerName)
		} else if a.ko.Spec.ProxyConfiguration.ContainerName != nil && b.ko.Spec.ProxyConfiguration.ContainerName != nil {
			if *a.ko.Spec.ProxyConfiguration.ContainerName != *b.ko.Spec.ProxyConfiguration.ContainerName {
				delta.Add("Spec.ProxyConfiguration.ContainerName", a.ko.Spec.ProxyConfiguration.ContainerName, b.ko.Spec.ProxyConfiguration.ContainerName)
			}
		}
		if len(a.ko.Spec.ProxyConfiguration.Properties) != len(b.ko.Spec.ProxyConfiguration.Properties) {
			delta.Add("Spec.ProxyConfiguration.Properties", a.ko.Spec.ProxyConfiguration.Properties, b.ko.Spec.ProxyConfiguration.Properties)
		} else if len(a.ko.Spec.ProxyConfiguration.Properties) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.ProxyConfiguration.Properties, b.ko.Spec.ProxyConfiguration.Properties) {
				delta.Add("Spec.ProxyConfiguration.Properties", a.ko.Spec.ProxyConfiguration.Properties, b.ko.Spec.ProxyConfiguration.Properties)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.ProxyConfiguration.Type, b.ko.Spec.ProxyConfiguration.Type) {
			delta.Add("Spec.ProxyConfiguration.Type", a.ko.Spec.ProxyConfiguration.Type, b.ko.Spec.ProxyConfiguration.Type)
		} else if a.ko.Spec.ProxyConfiguration.Type != nil && b.ko.Spec.ProxyConfiguration.Type != nil {
			if *a.ko.Spec.ProxyConfiguration.Type != *b.ko.Spec.ProxyConfiguration.Type {
				delta.Add("Spec.ProxyConfiguration.Type", a.ko.Spec.ProxyConfiguration.Type, b.ko.Spec.ProxyConfiguration.Type)
			}
		}
	}
	if len(a.ko.Spec.RequiresCompatibilities) != len(b.ko.Spec.RequiresCompatibilities) {
		delta.Add("Spec.RequiresCompatibilities", a.ko.Spec.RequiresCompatibilities, b.ko.Spec.RequiresCompatibilities)
	} else if len(a.ko.Spec.RequiresCompatibilities) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.RequiresCompatibilities, b.ko.Spec.RequiresCompatibilities) {
			delta.Add("Spec.RequiresCompatibilities", a.ko.Spec.RequiresCompatibilities, b.ko.Spec.RequiresCompatibilities)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RuntimePlatform, b.ko.Spec.RuntimePlatform) {
		delta.Add("Spec.RuntimePlatform", a.ko.Spec.RuntimePlatform, b.ko.Spec.RuntimePlatform)
	} else if a.ko.Spec.RuntimePlatform != nil && b.ko.Spec.RuntimePlatform != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.RuntimePlatform.CPUArchitecture, b.ko.Spec.RuntimePlatform.CPUArchitecture) {
			delta.Add("Spec.RuntimePlatform.CPUArchitecture", a.ko.Spec.RuntimePlatform.CPUArchitecture, b.ko.Spec.RuntimePlatform.CPUArchitecture)
		} else if a.ko.Spec.RuntimePlatform.CPUArchitecture != nil && b.ko.Spec.RuntimePlatform.CPUArchitecture != nil {
			if *a.ko.Spec.RuntimePlatform.CPUArchitecture != *b.ko.Spec.RuntimePlatform.CPUArchitecture {
				delta.Add("Spec.RuntimePlatform.CPUArchitecture", a.ko.Spec.RuntimePlatform.CPUArchitecture, b.ko.Spec.RuntimePlatform.CPUArchitecture)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.RuntimePlatform.OperatingSystemFamily, b.ko.Spec.RuntimePlatform.OperatingSystemFamily) {
			delta.Add("Spec.RuntimePlatform.OperatingSystemFamily", a.ko.Spec.RuntimePlatform.OperatingSystemFamily, b.ko.Spec.RuntimePlatform.OperatingSystemFamily)
		} else if a.ko.Spec.RuntimePlatform.OperatingSystemFamily != nil && b.ko.Spec.RuntimePlatform.OperatingSystemFamily != nil {
			if *a.ko.Spec.RuntimePlatform.OperatingSystemFamily != *b.ko.Spec.RuntimePlatform.OperatingSystemFamily {
				delta.Add("Spec.RuntimePlatform.OperatingSystemFamily", a.ko.Spec.RuntimePlatform.OperatingSystemFamily, b.ko.Spec.RuntimePlatform.OperatingSystemFamily)
			}
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TaskRoleARN, b.ko.Spec.TaskRoleARN) {
		delta.Add("Spec.TaskRoleARN", a.ko.Spec.TaskRoleARN, b.ko.Spec.TaskRoleARN)
	} else if a.ko.Spec.TaskRoleARN != nil && b.ko.Spec.TaskRoleARN != nil {
		if *a.ko.Spec.TaskRoleARN != *b.ko.Spec.TaskRoleARN {
			delta.Add("Spec.TaskRoleARN", a.ko.Spec.TaskRoleARN, b.ko.Spec.TaskRoleARN)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.TaskRoleRef, b.ko.Spec.TaskRoleRef) {
		delta.Add("Spec.TaskRoleRef", a.ko.Spec.TaskRoleRef, b.ko.Spec.TaskRoleRef)
	}
	if len(a.ko.Spec.Volumes) != len(b.ko.Spec.Volumes) {
		delta.Add("Spec.Volumes", a.ko.Spec.Volumes, b.ko.Spec.Volumes)
	} else if len(a.ko.Spec.Volumes) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Volumes, b.ko.Spec.Volumes) {
			delta.Add("Spec.Volumes", a.ko.Spec.Volumes, b.ko.Spec.Volumes)
		}
	}

	return delta
}
