// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package service

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ecs"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ecs-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Service{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if r.ko.Spec.Name != nil {
		input.Services = []string{*r.ko.Spec.Name}
	}
	if r.ko.Spec.Cluster != nil {
		input.Cluster = r.ko.Spec.Cluster
	}
	input.Include = []svcsdktypes.ServiceField{
		svcsdktypes.ServiceFieldTags,
	}
	var resp *svcsdk.DescribeServicesOutput
	resp, err = rm.sdkapi.DescribeServices(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeServices", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	if len(resp.Services) > 0 {
		if *resp.Services[0].Status == "INACTIVE" {
			return nil, ackerr.NotFound
		}
		if *resp.Services[0].Status == "DRAINING" {
			return nil, ackrequeue.NeededAfter(nil, 1000*1000*1000*5)
		}
	}

	found := false
	for _, elem := range resp.Services {
		if elem.CapacityProviderStrategy != nil {
			f0 := []*svcapitypes.CapacityProviderStrategyItem{}
			for _, f0iter := range elem.CapacityProviderStrategy {
				f0elem := &svcapitypes.CapacityProviderStrategyItem{}
				baseCopy := int64(f0iter.Base)
				f0elem.Base = &baseCopy
				if f0iter.CapacityProvider != nil {
					f0elem.CapacityProvider = f0iter.CapacityProvider
				}
				weightCopy := int64(f0iter.Weight)
				f0elem.Weight = &weightCopy
				f0 = append(f0, f0elem)
			}
			ko.Spec.CapacityProviderStrategy = f0
		} else {
			ko.Spec.CapacityProviderStrategy = nil
		}
		if elem.ClusterArn != nil {
			ko.Status.ClusterARN = elem.ClusterArn
		} else {
			ko.Status.ClusterARN = nil
		}
		if elem.CreatedAt != nil {
			ko.Status.CreatedAt = &metav1.Time{*elem.CreatedAt}
		} else {
			ko.Status.CreatedAt = nil
		}
		if elem.CreatedBy != nil {
			ko.Status.CreatedBy = elem.CreatedBy
		} else {
			ko.Status.CreatedBy = nil
		}
		if elem.DeploymentConfiguration != nil {
			f4 := &svcapitypes.DeploymentConfiguration{}
			if elem.DeploymentConfiguration.Alarms != nil {
				f4f0 := &svcapitypes.DeploymentAlarms{}
				if elem.DeploymentConfiguration.Alarms.AlarmNames != nil {
					f4f0.AlarmNames = aws.StringSlice(elem.DeploymentConfiguration.Alarms.AlarmNames)
				}
				f4f0.Enable = &elem.DeploymentConfiguration.Alarms.Enable
				f4f0.Rollback = &elem.DeploymentConfiguration.Alarms.Rollback
				f4.Alarms = f4f0
			}
			if elem.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
				f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
				f4f1.Enable = &elem.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
				f4f1.Rollback = &elem.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
				f4.DeploymentCircuitBreaker = f4f1
			}
			if elem.DeploymentConfiguration.MaximumPercent != nil {
				maximumPercentCopy := int64(*elem.DeploymentConfiguration.MaximumPercent)
				f4.MaximumPercent = &maximumPercentCopy
			}
			if elem.DeploymentConfiguration.MinimumHealthyPercent != nil {
				minimumHealthyPercentCopy := int64(*elem.DeploymentConfiguration.MinimumHealthyPercent)
				f4.MinimumHealthyPercent = &minimumHealthyPercentCopy
			}
			ko.Spec.DeploymentConfiguration = f4
		} else {
			ko.Spec.DeploymentConfiguration = nil
		}
		if elem.DeploymentController != nil {
			f5 := &svcapitypes.DeploymentController{}
			if elem.DeploymentController.Type != "" {
				f5.Type = aws.String(string(elem.DeploymentController.Type))
			}
			ko.Spec.DeploymentController = f5
		} else {
			ko.Spec.DeploymentController = nil
		}
		if elem.Deployments != nil {
			f6 := []*svcapitypes.Deployment{}
			for _, f6iter := range elem.Deployments {
				f6elem := &svcapitypes.Deployment{}
				if f6iter.CapacityProviderStrategy != nil {
					f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
						f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						baseCopy := int64(f6elemf0iter.Base)
						f6elemf0elem.Base = &baseCopy
						if f6elemf0iter.CapacityProvider != nil {
							f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
						}
						weightCopy := int64(f6elemf0iter.Weight)
						f6elemf0elem.Weight = &weightCopy
						f6elemf0 = append(f6elemf0, f6elemf0elem)
					}
					f6elem.CapacityProviderStrategy = f6elemf0
				}
				if f6iter.CreatedAt != nil {
					f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
				}
				desiredCountCopy := int64(f6iter.DesiredCount)
				f6elem.DesiredCount = &desiredCountCopy
				failedTasksCopy := int64(f6iter.FailedTasks)
				f6elem.FailedTasks = &failedTasksCopy
				if f6iter.Id != nil {
					f6elem.ID = f6iter.Id
				}
				if f6iter.LaunchType != "" {
					f6elem.LaunchType = aws.String(string(f6iter.LaunchType))
				}
				if f6iter.NetworkConfiguration != nil {
					f6elemf6 := &svcapitypes.NetworkConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
							f6elemf6f0.AssignPublicIP = aws.String(string(f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f6elemf6f0.SecurityGroups = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f6elemf6f0.Subnets = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
						}
						f6elemf6.AWSVPCConfiguration = f6elemf6f0
					}
					f6elem.NetworkConfiguration = f6elemf6
				}
				pendingCountCopy := int64(f6iter.PendingCount)
				f6elem.PendingCount = &pendingCountCopy
				if f6iter.PlatformFamily != nil {
					f6elem.PlatformFamily = f6iter.PlatformFamily
				}
				if f6iter.PlatformVersion != nil {
					f6elem.PlatformVersion = f6iter.PlatformVersion
				}
				if f6iter.RolloutState != "" {
					f6elem.RolloutState = aws.String(string(f6iter.RolloutState))
				}
				if f6iter.RolloutStateReason != nil {
					f6elem.RolloutStateReason = f6iter.RolloutStateReason
				}
				runningCountCopy := int64(f6iter.RunningCount)
				f6elem.RunningCount = &runningCountCopy
				if f6iter.ServiceConnectConfiguration != nil {
					f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
					f6elemf13.Enabled = &f6iter.ServiceConnectConfiguration.Enabled
					if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
						f6elemf13f1 := &svcapitypes.LogConfiguration{}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != "" {
							f6elemf13f1.LogDriver = aws.String(string(f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver))
						}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
							f6elemf13f1.Options = aws.StringMap(f6iter.ServiceConnectConfiguration.LogConfiguration.Options)
						}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
							f6elemf13f1f2 := []*svcapitypes.Secret{}
							for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
								f6elemf13f1f2elem := &svcapitypes.Secret{}
								if f6elemf13f1f2iter.Name != nil {
									f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
								}
								if f6elemf13f1f2iter.ValueFrom != nil {
									f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
								}
								f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
							}
							f6elemf13f1.SecretOptions = f6elemf13f1f2
						}
						f6elemf13.LogConfiguration = f6elemf13f1
					}
					if f6iter.ServiceConnectConfiguration.Namespace != nil {
						f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
					}
					if f6iter.ServiceConnectConfiguration.Services != nil {
						f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
						for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
							f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
							if f6elemf13f3iter.ClientAliases != nil {
								f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
								for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
									f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
									if f6elemf13f3elemf0iter.DnsName != nil {
										f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
									}
									if f6elemf13f3elemf0iter.Port != nil {
										portCopy := int64(*f6elemf13f3elemf0iter.Port)
										f6elemf13f3elemf0elem.Port = &portCopy
									}
									f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
								}
								f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
							}
							if f6elemf13f3iter.DiscoveryName != nil {
								f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
							}
							if f6elemf13f3iter.IngressPortOverride != nil {
								ingressPortOverrideCopy := int64(*f6elemf13f3iter.IngressPortOverride)
								f6elemf13f3elem.IngressPortOverride = &ingressPortOverrideCopy
							}
							if f6elemf13f3iter.PortName != nil {
								f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
							}
							if f6elemf13f3iter.Timeout != nil {
								f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
								if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
									idleTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.IdleTimeoutSeconds)
									f6elemf13f3elemf4.IdleTimeoutSeconds = &idleTimeoutSecondsCopy
								}
								if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
									perRequestTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds)
									f6elemf13f3elemf4.PerRequestTimeoutSeconds = &perRequestTimeoutSecondsCopy
								}
								f6elemf13f3elem.Timeout = f6elemf13f3elemf4
							}
							if f6elemf13f3iter.Tls != nil {
								f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
									f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
									if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
										f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
									}
									f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
								}
								if f6elemf13f3iter.Tls.KmsKey != nil {
									f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
								}
								if f6elemf13f3iter.Tls.RoleArn != nil {
									f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
								}
								f6elemf13f3elem.TLS = f6elemf13f3elemf5
							}
							f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
						}
						f6elemf13.Services = f6elemf13f3
					}
					f6elem.ServiceConnectConfiguration = f6elemf13
				}
				if f6iter.ServiceConnectResources != nil {
					f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
					for _, f6elemf14iter := range f6iter.ServiceConnectResources {
						f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
						if f6elemf14iter.DiscoveryArn != nil {
							f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
						}
						if f6elemf14iter.DiscoveryName != nil {
							f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
						}
						f6elemf14 = append(f6elemf14, f6elemf14elem)
					}
					f6elem.ServiceConnectResources = f6elemf14
				}
				if f6iter.Status != nil {
					f6elem.Status = f6iter.Status
				}
				if f6iter.TaskDefinition != nil {
					f6elem.TaskDefinition = f6iter.TaskDefinition
				}
				if f6iter.UpdatedAt != nil {
					f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
				}
				if f6iter.VolumeConfigurations != nil {
					f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
					for _, f6elemf18iter := range f6iter.VolumeConfigurations {
						f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume != nil {
							f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
							if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
								f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
							}
							if f6elemf18iter.ManagedEBSVolume.FilesystemType != "" {
								f6elemf18elemf0.FilesystemType = aws.String(string(f6elemf18iter.ManagedEBSVolume.FilesystemType))
							}
							if f6elemf18iter.ManagedEBSVolume.Iops != nil {
								iopsCopy := int64(*f6elemf18iter.ManagedEBSVolume.Iops)
								f6elemf18elemf0.IOPS = &iopsCopy
							}
							if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
								f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
							}
							if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
								f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
							}
							if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
								sizeInGiBCopy := int64(*f6elemf18iter.ManagedEBSVolume.SizeInGiB)
								f6elemf18elemf0.SizeInGiB = &sizeInGiBCopy
							}
							if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
								f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
							}
							if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
								f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
								for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
									f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
									if f6elemf18elemf0f7iter.PropagateTags != "" {
										f6elemf18elemf0f7elem.PropagateTags = aws.String(string(f6elemf18elemf0f7iter.PropagateTags))
									}
									if f6elemf18elemf0f7iter.ResourceType != "" {
										f6elemf18elemf0f7elem.ResourceType = aws.String(string(f6elemf18elemf0f7iter.ResourceType))
									}
									if f6elemf18elemf0f7iter.Tags != nil {
										f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
										for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
											f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
											if f6elemf18elemf0f7elemf2iter.Key != nil {
												f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
											}
											if f6elemf18elemf0f7elemf2iter.Value != nil {
												f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
											}
											f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
										}
										f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
									}
									f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
								}
								f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
							}
							if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
								throughputCopy := int64(*f6elemf18iter.ManagedEBSVolume.Throughput)
								f6elemf18elemf0.Throughput = &throughputCopy
							}
							if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
								f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
							}
							f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
						}
						if f6elemf18iter.Name != nil {
							f6elemf18elem.Name = f6elemf18iter.Name
						}
						f6elemf18 = append(f6elemf18, f6elemf18elem)
					}
					f6elem.VolumeConfigurations = f6elemf18
				}
				f6 = append(f6, f6elem)
			}
			ko.Status.Deployments = f6
		} else {
			ko.Status.Deployments = nil
		}
		desiredCountCopy := int64(elem.DesiredCount)
		ko.Spec.DesiredCount = &desiredCountCopy
		ko.Spec.EnableECSManagedTags = &elem.EnableECSManagedTags
		ko.Spec.EnableExecuteCommand = &elem.EnableExecuteCommand
		if elem.Events != nil {
			f10 := []*svcapitypes.ServiceEvent{}
			for _, f10iter := range elem.Events {
				f10elem := &svcapitypes.ServiceEvent{}
				if f10iter.CreatedAt != nil {
					f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
				}
				if f10iter.Id != nil {
					f10elem.ID = f10iter.Id
				}
				if f10iter.Message != nil {
					f10elem.Message = f10iter.Message
				}
				f10 = append(f10, f10elem)
			}
			ko.Status.Events = f10
		} else {
			ko.Status.Events = nil
		}
		if elem.HealthCheckGracePeriodSeconds != nil {
			healthCheckGracePeriodSecondsCopy := int64(*elem.HealthCheckGracePeriodSeconds)
			ko.Spec.HealthCheckGracePeriodSeconds = &healthCheckGracePeriodSecondsCopy
		} else {
			ko.Spec.HealthCheckGracePeriodSeconds = nil
		}
		if elem.LaunchType != "" {
			ko.Spec.LaunchType = aws.String(string(elem.LaunchType))
		} else {
			ko.Spec.LaunchType = nil
		}
		if elem.LoadBalancers != nil {
			f13 := []*svcapitypes.LoadBalancer{}
			for _, f13iter := range elem.LoadBalancers {
				f13elem := &svcapitypes.LoadBalancer{}
				if f13iter.ContainerName != nil {
					f13elem.ContainerName = f13iter.ContainerName
				}
				if f13iter.ContainerPort != nil {
					containerPortCopy := int64(*f13iter.ContainerPort)
					f13elem.ContainerPort = &containerPortCopy
				}
				if f13iter.LoadBalancerName != nil {
					f13elem.LoadBalancerName = f13iter.LoadBalancerName
				}
				if f13iter.TargetGroupArn != nil {
					f13elem.TargetGroupARN = f13iter.TargetGroupArn
				}
				f13 = append(f13, f13elem)
			}
			ko.Spec.LoadBalancers = f13
		} else {
			ko.Spec.LoadBalancers = nil
		}
		if elem.NetworkConfiguration != nil {
			f14 := &svcapitypes.NetworkConfiguration{}
			if elem.NetworkConfiguration.AwsvpcConfiguration != nil {
				f14f0 := &svcapitypes.AWSVPCConfiguration{}
				if elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
					f14f0.AssignPublicIP = aws.String(string(elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
					f14f0.SecurityGroups = aws.StringSlice(elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
					f14f0.Subnets = aws.StringSlice(elem.NetworkConfiguration.AwsvpcConfiguration.Subnets)
				}
				f14.AWSVPCConfiguration = f14f0
			}
			ko.Spec.NetworkConfiguration = f14
		} else {
			ko.Spec.NetworkConfiguration = nil
		}
		pendingCountCopy := int64(elem.PendingCount)
		ko.Status.PendingCount = &pendingCountCopy
		if elem.PlacementConstraints != nil {
			f16 := []*svcapitypes.PlacementConstraint{}
			for _, f16iter := range elem.PlacementConstraints {
				f16elem := &svcapitypes.PlacementConstraint{}
				if f16iter.Expression != nil {
					f16elem.Expression = f16iter.Expression
				}
				if f16iter.Type != "" {
					f16elem.Type = aws.String(string(f16iter.Type))
				}
				f16 = append(f16, f16elem)
			}
			ko.Spec.PlacementConstraints = f16
		} else {
			ko.Spec.PlacementConstraints = nil
		}
		if elem.PlacementStrategy != nil {
			f17 := []*svcapitypes.PlacementStrategy{}
			for _, f17iter := range elem.PlacementStrategy {
				f17elem := &svcapitypes.PlacementStrategy{}
				if f17iter.Field != nil {
					f17elem.Field = f17iter.Field
				}
				if f17iter.Type != "" {
					f17elem.Type = aws.String(string(f17iter.Type))
				}
				f17 = append(f17, f17elem)
			}
			ko.Spec.PlacementStrategy = f17
		} else {
			ko.Spec.PlacementStrategy = nil
		}
		if elem.PlatformFamily != nil {
			ko.Status.PlatformFamily = elem.PlatformFamily
		} else {
			ko.Status.PlatformFamily = nil
		}
		if elem.PlatformVersion != nil {
			ko.Spec.PlatformVersion = elem.PlatformVersion
		} else {
			ko.Spec.PlatformVersion = nil
		}
		if elem.PropagateTags != "" {
			ko.Spec.PropagateTags = aws.String(string(elem.PropagateTags))
		} else {
			ko.Spec.PropagateTags = nil
		}
		if elem.RoleArn != nil {
			ko.Status.RoleARN = elem.RoleArn
		} else {
			ko.Status.RoleARN = nil
		}
		runningCountCopy := int64(elem.RunningCount)
		ko.Status.RunningCount = &runningCountCopy
		if elem.SchedulingStrategy != "" {
			ko.Spec.SchedulingStrategy = aws.String(string(elem.SchedulingStrategy))
		} else {
			ko.Spec.SchedulingStrategy = nil
		}
		if elem.ServiceArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ServiceArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.ServiceName != nil {
			if ko.Spec.Name != nil {
				if *elem.ServiceName != *ko.Spec.Name {
					continue
				}
			}
			ko.Spec.Name = elem.ServiceName
		} else {
			ko.Spec.Name = nil
		}
		if elem.ServiceRegistries != nil {
			f26 := []*svcapitypes.ServiceRegistry{}
			for _, f26iter := range elem.ServiceRegistries {
				f26elem := &svcapitypes.ServiceRegistry{}
				if f26iter.ContainerName != nil {
					f26elem.ContainerName = f26iter.ContainerName
				}
				if f26iter.ContainerPort != nil {
					containerPortCopy := int64(*f26iter.ContainerPort)
					f26elem.ContainerPort = &containerPortCopy
				}
				if f26iter.Port != nil {
					portCopy := int64(*f26iter.Port)
					f26elem.Port = &portCopy
				}
				if f26iter.RegistryArn != nil {
					f26elem.RegistryARN = f26iter.RegistryArn
				}
				f26 = append(f26, f26elem)
			}
			ko.Spec.ServiceRegistries = f26
		} else {
			ko.Spec.ServiceRegistries = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.Tags != nil {
			f28 := []*svcapitypes.Tag{}
			for _, f28iter := range elem.Tags {
				f28elem := &svcapitypes.Tag{}
				if f28iter.Key != nil {
					f28elem.Key = f28iter.Key
				}
				if f28iter.Value != nil {
					f28elem.Value = f28iter.Value
				}
				f28 = append(f28, f28elem)
			}
			ko.Spec.Tags = f28
		} else {
			ko.Spec.Tags = nil
		}
		if elem.TaskDefinition != nil {
			ko.Spec.TaskDefinition = elem.TaskDefinition
		} else {
			ko.Spec.TaskDefinition = nil
		}
		if elem.TaskSets != nil {
			f30 := []*svcapitypes.TaskSet{}
			for _, f30iter := range elem.TaskSets {
				f30elem := &svcapitypes.TaskSet{}
				if f30iter.CapacityProviderStrategy != nil {
					f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
						f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						baseCopy := int64(f30elemf0iter.Base)
						f30elemf0elem.Base = &baseCopy
						if f30elemf0iter.CapacityProvider != nil {
							f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
						}
						weightCopy := int64(f30elemf0iter.Weight)
						f30elemf0elem.Weight = &weightCopy
						f30elemf0 = append(f30elemf0, f30elemf0elem)
					}
					f30elem.CapacityProviderStrategy = f30elemf0
				}
				if f30iter.ClusterArn != nil {
					f30elem.ClusterARN = f30iter.ClusterArn
				}
				computedDesiredCountCopy := int64(f30iter.ComputedDesiredCount)
				f30elem.ComputedDesiredCount = &computedDesiredCountCopy
				if f30iter.CreatedAt != nil {
					f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
				}
				if f30iter.ExternalId != nil {
					f30elem.ExternalID = f30iter.ExternalId
				}
				if f30iter.Id != nil {
					f30elem.ID = f30iter.Id
				}
				if f30iter.LaunchType != "" {
					f30elem.LaunchType = aws.String(string(f30iter.LaunchType))
				}
				if f30iter.LoadBalancers != nil {
					f30elemf7 := []*svcapitypes.LoadBalancer{}
					for _, f30elemf7iter := range f30iter.LoadBalancers {
						f30elemf7elem := &svcapitypes.LoadBalancer{}
						if f30elemf7iter.ContainerName != nil {
							f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
						}
						if f30elemf7iter.ContainerPort != nil {
							containerPortCopy := int64(*f30elemf7iter.ContainerPort)
							f30elemf7elem.ContainerPort = &containerPortCopy
						}
						if f30elemf7iter.LoadBalancerName != nil {
							f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
						}
						if f30elemf7iter.TargetGroupArn != nil {
							f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
						}
						f30elemf7 = append(f30elemf7, f30elemf7elem)
					}
					f30elem.LoadBalancers = f30elemf7
				}
				if f30iter.NetworkConfiguration != nil {
					f30elemf8 := &svcapitypes.NetworkConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
							f30elemf8f0.AssignPublicIP = aws.String(string(f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f30elemf8f0.SecurityGroups = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f30elemf8f0.Subnets = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
						}
						f30elemf8.AWSVPCConfiguration = f30elemf8f0
					}
					f30elem.NetworkConfiguration = f30elemf8
				}
				pendingCountCopy := int64(f30iter.PendingCount)
				f30elem.PendingCount = &pendingCountCopy
				if f30iter.PlatformFamily != nil {
					f30elem.PlatformFamily = f30iter.PlatformFamily
				}
				if f30iter.PlatformVersion != nil {
					f30elem.PlatformVersion = f30iter.PlatformVersion
				}
				runningCountCopy := int64(f30iter.RunningCount)
				f30elem.RunningCount = &runningCountCopy
				if f30iter.Scale != nil {
					f30elemf13 := &svcapitypes.Scale{}
					if f30iter.Scale.Unit != "" {
						f30elemf13.Unit = aws.String(string(f30iter.Scale.Unit))
					}
					f30elemf13.Value = &f30iter.Scale.Value
					f30elem.Scale = f30elemf13
				}
				if f30iter.ServiceArn != nil {
					f30elem.ServiceARN = f30iter.ServiceArn
				}
				if f30iter.ServiceRegistries != nil {
					f30elemf15 := []*svcapitypes.ServiceRegistry{}
					for _, f30elemf15iter := range f30iter.ServiceRegistries {
						f30elemf15elem := &svcapitypes.ServiceRegistry{}
						if f30elemf15iter.ContainerName != nil {
							f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
						}
						if f30elemf15iter.ContainerPort != nil {
							containerPortCopy := int64(*f30elemf15iter.ContainerPort)
							f30elemf15elem.ContainerPort = &containerPortCopy
						}
						if f30elemf15iter.Port != nil {
							portCopy := int64(*f30elemf15iter.Port)
							f30elemf15elem.Port = &portCopy
						}
						if f30elemf15iter.RegistryArn != nil {
							f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
						}
						f30elemf15 = append(f30elemf15, f30elemf15elem)
					}
					f30elem.ServiceRegistries = f30elemf15
				}
				if f30iter.StabilityStatus != "" {
					f30elem.StabilityStatus = aws.String(string(f30iter.StabilityStatus))
				}
				if f30iter.StabilityStatusAt != nil {
					f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
				}
				if f30iter.StartedBy != nil {
					f30elem.StartedBy = f30iter.StartedBy
				}
				if f30iter.Status != nil {
					f30elem.Status = f30iter.Status
				}
				if f30iter.Tags != nil {
					f30elemf20 := []*svcapitypes.Tag{}
					for _, f30elemf20iter := range f30iter.Tags {
						f30elemf20elem := &svcapitypes.Tag{}
						if f30elemf20iter.Key != nil {
							f30elemf20elem.Key = f30elemf20iter.Key
						}
						if f30elemf20iter.Value != nil {
							f30elemf20elem.Value = f30elemf20iter.Value
						}
						f30elemf20 = append(f30elemf20, f30elemf20elem)
					}
					f30elem.Tags = f30elemf20
				}
				if f30iter.TaskDefinition != nil {
					f30elem.TaskDefinition = f30iter.TaskDefinition
				}
				if f30iter.TaskSetArn != nil {
					f30elem.TaskSetARN = f30iter.TaskSetArn
				}
				if f30iter.UpdatedAt != nil {
					f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
				}
				f30 = append(f30, f30elem)
			}
			ko.Status.TaskSets = f30
		} else {
			ko.Status.TaskSets = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeServicesInput, error) {
	res := &svcsdk.DescribeServicesInput{}

	if r.ko.Spec.Cluster != nil {
		res.Cluster = r.ko.Spec.Cluster
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateServiceOutput
	_ = resp
	resp, err = rm.sdkapi.CreateService(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateService", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Service.CapacityProviderStrategy != nil {
		f0 := []*svcapitypes.CapacityProviderStrategyItem{}
		for _, f0iter := range resp.Service.CapacityProviderStrategy {
			f0elem := &svcapitypes.CapacityProviderStrategyItem{}
			baseCopy := int64(f0iter.Base)
			f0elem.Base = &baseCopy
			if f0iter.CapacityProvider != nil {
				f0elem.CapacityProvider = f0iter.CapacityProvider
			}
			weightCopy := int64(f0iter.Weight)
			f0elem.Weight = &weightCopy
			f0 = append(f0, f0elem)
		}
		ko.Spec.CapacityProviderStrategy = f0
	} else {
		ko.Spec.CapacityProviderStrategy = nil
	}
	if resp.Service.ClusterArn != nil {
		ko.Status.ClusterARN = resp.Service.ClusterArn
	} else {
		ko.Status.ClusterARN = nil
	}
	if resp.Service.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Service.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Service.CreatedBy != nil {
		ko.Status.CreatedBy = resp.Service.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.Service.DeploymentConfiguration != nil {
		f4 := &svcapitypes.DeploymentConfiguration{}
		if resp.Service.DeploymentConfiguration.Alarms != nil {
			f4f0 := &svcapitypes.DeploymentAlarms{}
			if resp.Service.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f4f0.AlarmNames = aws.StringSlice(resp.Service.DeploymentConfiguration.Alarms.AlarmNames)
			}
			f4f0.Enable = &resp.Service.DeploymentConfiguration.Alarms.Enable
			f4f0.Rollback = &resp.Service.DeploymentConfiguration.Alarms.Rollback
			f4.Alarms = f4f0
		}
		if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
			f4f1.Enable = &resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			f4f1.Rollback = &resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			f4.DeploymentCircuitBreaker = f4f1
		}
		if resp.Service.DeploymentConfiguration.MaximumPercent != nil {
			maximumPercentCopy := int64(*resp.Service.DeploymentConfiguration.MaximumPercent)
			f4.MaximumPercent = &maximumPercentCopy
		}
		if resp.Service.DeploymentConfiguration.MinimumHealthyPercent != nil {
			minimumHealthyPercentCopy := int64(*resp.Service.DeploymentConfiguration.MinimumHealthyPercent)
			f4.MinimumHealthyPercent = &minimumHealthyPercentCopy
		}
		ko.Spec.DeploymentConfiguration = f4
	} else {
		ko.Spec.DeploymentConfiguration = nil
	}
	if resp.Service.DeploymentController != nil {
		f5 := &svcapitypes.DeploymentController{}
		if resp.Service.DeploymentController.Type != "" {
			f5.Type = aws.String(string(resp.Service.DeploymentController.Type))
		}
		ko.Spec.DeploymentController = f5
	} else {
		ko.Spec.DeploymentController = nil
	}
	if resp.Service.Deployments != nil {
		f6 := []*svcapitypes.Deployment{}
		for _, f6iter := range resp.Service.Deployments {
			f6elem := &svcapitypes.Deployment{}
			if f6iter.CapacityProviderStrategy != nil {
				f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
					f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					baseCopy := int64(f6elemf0iter.Base)
					f6elemf0elem.Base = &baseCopy
					if f6elemf0iter.CapacityProvider != nil {
						f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
					}
					weightCopy := int64(f6elemf0iter.Weight)
					f6elemf0elem.Weight = &weightCopy
					f6elemf0 = append(f6elemf0, f6elemf0elem)
				}
				f6elem.CapacityProviderStrategy = f6elemf0
			}
			if f6iter.CreatedAt != nil {
				f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
			}
			desiredCountCopy := int64(f6iter.DesiredCount)
			f6elem.DesiredCount = &desiredCountCopy
			failedTasksCopy := int64(f6iter.FailedTasks)
			f6elem.FailedTasks = &failedTasksCopy
			if f6iter.Id != nil {
				f6elem.ID = f6iter.Id
			}
			if f6iter.LaunchType != "" {
				f6elem.LaunchType = aws.String(string(f6iter.LaunchType))
			}
			if f6iter.NetworkConfiguration != nil {
				f6elemf6 := &svcapitypes.NetworkConfiguration{}
				if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
						f6elemf6f0.AssignPublicIP = aws.String(string(f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f6elemf6f0.SecurityGroups = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f6elemf6f0.Subnets = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
					}
					f6elemf6.AWSVPCConfiguration = f6elemf6f0
				}
				f6elem.NetworkConfiguration = f6elemf6
			}
			pendingCountCopy := int64(f6iter.PendingCount)
			f6elem.PendingCount = &pendingCountCopy
			if f6iter.PlatformFamily != nil {
				f6elem.PlatformFamily = f6iter.PlatformFamily
			}
			if f6iter.PlatformVersion != nil {
				f6elem.PlatformVersion = f6iter.PlatformVersion
			}
			if f6iter.RolloutState != "" {
				f6elem.RolloutState = aws.String(string(f6iter.RolloutState))
			}
			if f6iter.RolloutStateReason != nil {
				f6elem.RolloutStateReason = f6iter.RolloutStateReason
			}
			runningCountCopy := int64(f6iter.RunningCount)
			f6elem.RunningCount = &runningCountCopy
			if f6iter.ServiceConnectConfiguration != nil {
				f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
				f6elemf13.Enabled = &f6iter.ServiceConnectConfiguration.Enabled
				if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
					f6elemf13f1 := &svcapitypes.LogConfiguration{}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != "" {
						f6elemf13f1.LogDriver = aws.String(string(f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver))
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
						f6elemf13f1.Options = aws.StringMap(f6iter.ServiceConnectConfiguration.LogConfiguration.Options)
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
						f6elemf13f1f2 := []*svcapitypes.Secret{}
						for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
							f6elemf13f1f2elem := &svcapitypes.Secret{}
							if f6elemf13f1f2iter.Name != nil {
								f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
							}
							if f6elemf13f1f2iter.ValueFrom != nil {
								f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
							}
							f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
						}
						f6elemf13f1.SecretOptions = f6elemf13f1f2
					}
					f6elemf13.LogConfiguration = f6elemf13f1
				}
				if f6iter.ServiceConnectConfiguration.Namespace != nil {
					f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
				}
				if f6iter.ServiceConnectConfiguration.Services != nil {
					f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
					for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
						f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
						if f6elemf13f3iter.ClientAliases != nil {
							f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
							for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
								f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
								if f6elemf13f3elemf0iter.DnsName != nil {
									f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
								}
								if f6elemf13f3elemf0iter.Port != nil {
									portCopy := int64(*f6elemf13f3elemf0iter.Port)
									f6elemf13f3elemf0elem.Port = &portCopy
								}
								f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
							}
							f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
						}
						if f6elemf13f3iter.DiscoveryName != nil {
							f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
						}
						if f6elemf13f3iter.IngressPortOverride != nil {
							ingressPortOverrideCopy := int64(*f6elemf13f3iter.IngressPortOverride)
							f6elemf13f3elem.IngressPortOverride = &ingressPortOverrideCopy
						}
						if f6elemf13f3iter.PortName != nil {
							f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
						}
						if f6elemf13f3iter.Timeout != nil {
							f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
							if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
								idleTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.IdleTimeoutSeconds)
								f6elemf13f3elemf4.IdleTimeoutSeconds = &idleTimeoutSecondsCopy
							}
							if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
								perRequestTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds)
								f6elemf13f3elemf4.PerRequestTimeoutSeconds = &perRequestTimeoutSecondsCopy
							}
							f6elemf13f3elem.Timeout = f6elemf13f3elemf4
						}
						if f6elemf13f3iter.Tls != nil {
							f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
							if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
								f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
									f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
								}
								f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
							}
							if f6elemf13f3iter.Tls.KmsKey != nil {
								f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
							}
							if f6elemf13f3iter.Tls.RoleArn != nil {
								f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
							}
							f6elemf13f3elem.TLS = f6elemf13f3elemf5
						}
						f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
					}
					f6elemf13.Services = f6elemf13f3
				}
				f6elem.ServiceConnectConfiguration = f6elemf13
			}
			if f6iter.ServiceConnectResources != nil {
				f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
				for _, f6elemf14iter := range f6iter.ServiceConnectResources {
					f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
					if f6elemf14iter.DiscoveryArn != nil {
						f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
					}
					if f6elemf14iter.DiscoveryName != nil {
						f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
					}
					f6elemf14 = append(f6elemf14, f6elemf14elem)
				}
				f6elem.ServiceConnectResources = f6elemf14
			}
			if f6iter.Status != nil {
				f6elem.Status = f6iter.Status
			}
			if f6iter.TaskDefinition != nil {
				f6elem.TaskDefinition = f6iter.TaskDefinition
			}
			if f6iter.UpdatedAt != nil {
				f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
			}
			if f6iter.VolumeConfigurations != nil {
				f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
				for _, f6elemf18iter := range f6iter.VolumeConfigurations {
					f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
					if f6elemf18iter.ManagedEBSVolume != nil {
						f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
							f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
						}
						if f6elemf18iter.ManagedEBSVolume.FilesystemType != "" {
							f6elemf18elemf0.FilesystemType = aws.String(string(f6elemf18iter.ManagedEBSVolume.FilesystemType))
						}
						if f6elemf18iter.ManagedEBSVolume.Iops != nil {
							iopsCopy := int64(*f6elemf18iter.ManagedEBSVolume.Iops)
							f6elemf18elemf0.IOPS = &iopsCopy
						}
						if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
							f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
						}
						if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
							f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
						}
						if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
							sizeInGiBCopy := int64(*f6elemf18iter.ManagedEBSVolume.SizeInGiB)
							f6elemf18elemf0.SizeInGiB = &sizeInGiBCopy
						}
						if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
							f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
						}
						if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
							f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
							for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
								f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
								if f6elemf18elemf0f7iter.PropagateTags != "" {
									f6elemf18elemf0f7elem.PropagateTags = aws.String(string(f6elemf18elemf0f7iter.PropagateTags))
								}
								if f6elemf18elemf0f7iter.ResourceType != "" {
									f6elemf18elemf0f7elem.ResourceType = aws.String(string(f6elemf18elemf0f7iter.ResourceType))
								}
								if f6elemf18elemf0f7iter.Tags != nil {
									f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
									for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
										f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
										if f6elemf18elemf0f7elemf2iter.Key != nil {
											f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
										}
										if f6elemf18elemf0f7elemf2iter.Value != nil {
											f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
										}
										f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
									}
									f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
								}
								f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
							}
							f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
						}
						if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
							throughputCopy := int64(*f6elemf18iter.ManagedEBSVolume.Throughput)
							f6elemf18elemf0.Throughput = &throughputCopy
						}
						if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
							f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
						}
						f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
					}
					if f6elemf18iter.Name != nil {
						f6elemf18elem.Name = f6elemf18iter.Name
					}
					f6elemf18 = append(f6elemf18, f6elemf18elem)
				}
				f6elem.VolumeConfigurations = f6elemf18
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Deployments = f6
	} else {
		ko.Status.Deployments = nil
	}
	desiredCountCopy := int64(resp.Service.DesiredCount)
	ko.Spec.DesiredCount = &desiredCountCopy
	ko.Spec.EnableECSManagedTags = &resp.Service.EnableECSManagedTags
	ko.Spec.EnableExecuteCommand = &resp.Service.EnableExecuteCommand
	if resp.Service.Events != nil {
		f10 := []*svcapitypes.ServiceEvent{}
		for _, f10iter := range resp.Service.Events {
			f10elem := &svcapitypes.ServiceEvent{}
			if f10iter.CreatedAt != nil {
				f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
			}
			if f10iter.Id != nil {
				f10elem.ID = f10iter.Id
			}
			if f10iter.Message != nil {
				f10elem.Message = f10iter.Message
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Events = f10
	} else {
		ko.Status.Events = nil
	}
	if resp.Service.HealthCheckGracePeriodSeconds != nil {
		healthCheckGracePeriodSecondsCopy := int64(*resp.Service.HealthCheckGracePeriodSeconds)
		ko.Spec.HealthCheckGracePeriodSeconds = &healthCheckGracePeriodSecondsCopy
	} else {
		ko.Spec.HealthCheckGracePeriodSeconds = nil
	}
	if resp.Service.LaunchType != "" {
		ko.Spec.LaunchType = aws.String(string(resp.Service.LaunchType))
	} else {
		ko.Spec.LaunchType = nil
	}
	if resp.Service.LoadBalancers != nil {
		f13 := []*svcapitypes.LoadBalancer{}
		for _, f13iter := range resp.Service.LoadBalancers {
			f13elem := &svcapitypes.LoadBalancer{}
			if f13iter.ContainerName != nil {
				f13elem.ContainerName = f13iter.ContainerName
			}
			if f13iter.ContainerPort != nil {
				containerPortCopy := int64(*f13iter.ContainerPort)
				f13elem.ContainerPort = &containerPortCopy
			}
			if f13iter.LoadBalancerName != nil {
				f13elem.LoadBalancerName = f13iter.LoadBalancerName
			}
			if f13iter.TargetGroupArn != nil {
				f13elem.TargetGroupARN = f13iter.TargetGroupArn
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LoadBalancers = f13
	} else {
		ko.Spec.LoadBalancers = nil
	}
	if resp.Service.NetworkConfiguration != nil {
		f14 := &svcapitypes.NetworkConfiguration{}
		if resp.Service.NetworkConfiguration.AwsvpcConfiguration != nil {
			f14f0 := &svcapitypes.AWSVPCConfiguration{}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
				f14f0.AssignPublicIP = aws.String(string(resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
				f14f0.SecurityGroups = aws.StringSlice(resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
				f14f0.Subnets = aws.StringSlice(resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets)
			}
			f14.AWSVPCConfiguration = f14f0
		}
		ko.Spec.NetworkConfiguration = f14
	} else {
		ko.Spec.NetworkConfiguration = nil
	}
	pendingCountCopy := int64(resp.Service.PendingCount)
	ko.Status.PendingCount = &pendingCountCopy
	if resp.Service.PlacementConstraints != nil {
		f16 := []*svcapitypes.PlacementConstraint{}
		for _, f16iter := range resp.Service.PlacementConstraints {
			f16elem := &svcapitypes.PlacementConstraint{}
			if f16iter.Expression != nil {
				f16elem.Expression = f16iter.Expression
			}
			if f16iter.Type != "" {
				f16elem.Type = aws.String(string(f16iter.Type))
			}
			f16 = append(f16, f16elem)
		}
		ko.Spec.PlacementConstraints = f16
	} else {
		ko.Spec.PlacementConstraints = nil
	}
	if resp.Service.PlacementStrategy != nil {
		f17 := []*svcapitypes.PlacementStrategy{}
		for _, f17iter := range resp.Service.PlacementStrategy {
			f17elem := &svcapitypes.PlacementStrategy{}
			if f17iter.Field != nil {
				f17elem.Field = f17iter.Field
			}
			if f17iter.Type != "" {
				f17elem.Type = aws.String(string(f17iter.Type))
			}
			f17 = append(f17, f17elem)
		}
		ko.Spec.PlacementStrategy = f17
	} else {
		ko.Spec.PlacementStrategy = nil
	}
	if resp.Service.PlatformFamily != nil {
		ko.Status.PlatformFamily = resp.Service.PlatformFamily
	} else {
		ko.Status.PlatformFamily = nil
	}
	if resp.Service.PlatformVersion != nil {
		ko.Spec.PlatformVersion = resp.Service.PlatformVersion
	} else {
		ko.Spec.PlatformVersion = nil
	}
	if resp.Service.PropagateTags != "" {
		ko.Spec.PropagateTags = aws.String(string(resp.Service.PropagateTags))
	} else {
		ko.Spec.PropagateTags = nil
	}
	if resp.Service.RoleArn != nil {
		ko.Status.RoleARN = resp.Service.RoleArn
	} else {
		ko.Status.RoleARN = nil
	}
	runningCountCopy := int64(resp.Service.RunningCount)
	ko.Status.RunningCount = &runningCountCopy
	if resp.Service.SchedulingStrategy != "" {
		ko.Spec.SchedulingStrategy = aws.String(string(resp.Service.SchedulingStrategy))
	} else {
		ko.Spec.SchedulingStrategy = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Service.ServiceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Service.ServiceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Service.ServiceName != nil {
		ko.Spec.Name = resp.Service.ServiceName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Service.ServiceRegistries != nil {
		f26 := []*svcapitypes.ServiceRegistry{}
		for _, f26iter := range resp.Service.ServiceRegistries {
			f26elem := &svcapitypes.ServiceRegistry{}
			if f26iter.ContainerName != nil {
				f26elem.ContainerName = f26iter.ContainerName
			}
			if f26iter.ContainerPort != nil {
				containerPortCopy := int64(*f26iter.ContainerPort)
				f26elem.ContainerPort = &containerPortCopy
			}
			if f26iter.Port != nil {
				portCopy := int64(*f26iter.Port)
				f26elem.Port = &portCopy
			}
			if f26iter.RegistryArn != nil {
				f26elem.RegistryARN = f26iter.RegistryArn
			}
			f26 = append(f26, f26elem)
		}
		ko.Spec.ServiceRegistries = f26
	} else {
		ko.Spec.ServiceRegistries = nil
	}
	if resp.Service.Status != nil {
		ko.Status.Status = resp.Service.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.Service.Tags != nil {
		f28 := []*svcapitypes.Tag{}
		for _, f28iter := range resp.Service.Tags {
			f28elem := &svcapitypes.Tag{}
			if f28iter.Key != nil {
				f28elem.Key = f28iter.Key
			}
			if f28iter.Value != nil {
				f28elem.Value = f28iter.Value
			}
			f28 = append(f28, f28elem)
		}
		ko.Spec.Tags = f28
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Service.TaskDefinition != nil {
		ko.Spec.TaskDefinition = resp.Service.TaskDefinition
	} else {
		ko.Spec.TaskDefinition = nil
	}
	if resp.Service.TaskSets != nil {
		f30 := []*svcapitypes.TaskSet{}
		for _, f30iter := range resp.Service.TaskSets {
			f30elem := &svcapitypes.TaskSet{}
			if f30iter.CapacityProviderStrategy != nil {
				f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
					f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					baseCopy := int64(f30elemf0iter.Base)
					f30elemf0elem.Base = &baseCopy
					if f30elemf0iter.CapacityProvider != nil {
						f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
					}
					weightCopy := int64(f30elemf0iter.Weight)
					f30elemf0elem.Weight = &weightCopy
					f30elemf0 = append(f30elemf0, f30elemf0elem)
				}
				f30elem.CapacityProviderStrategy = f30elemf0
			}
			if f30iter.ClusterArn != nil {
				f30elem.ClusterARN = f30iter.ClusterArn
			}
			computedDesiredCountCopy := int64(f30iter.ComputedDesiredCount)
			f30elem.ComputedDesiredCount = &computedDesiredCountCopy
			if f30iter.CreatedAt != nil {
				f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
			}
			if f30iter.ExternalId != nil {
				f30elem.ExternalID = f30iter.ExternalId
			}
			if f30iter.Id != nil {
				f30elem.ID = f30iter.Id
			}
			if f30iter.LaunchType != "" {
				f30elem.LaunchType = aws.String(string(f30iter.LaunchType))
			}
			if f30iter.LoadBalancers != nil {
				f30elemf7 := []*svcapitypes.LoadBalancer{}
				for _, f30elemf7iter := range f30iter.LoadBalancers {
					f30elemf7elem := &svcapitypes.LoadBalancer{}
					if f30elemf7iter.ContainerName != nil {
						f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
					}
					if f30elemf7iter.ContainerPort != nil {
						containerPortCopy := int64(*f30elemf7iter.ContainerPort)
						f30elemf7elem.ContainerPort = &containerPortCopy
					}
					if f30elemf7iter.LoadBalancerName != nil {
						f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
					}
					if f30elemf7iter.TargetGroupArn != nil {
						f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
					}
					f30elemf7 = append(f30elemf7, f30elemf7elem)
				}
				f30elem.LoadBalancers = f30elemf7
			}
			if f30iter.NetworkConfiguration != nil {
				f30elemf8 := &svcapitypes.NetworkConfiguration{}
				if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
						f30elemf8f0.AssignPublicIP = aws.String(string(f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f30elemf8f0.SecurityGroups = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f30elemf8f0.Subnets = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
					}
					f30elemf8.AWSVPCConfiguration = f30elemf8f0
				}
				f30elem.NetworkConfiguration = f30elemf8
			}
			pendingCountCopy := int64(f30iter.PendingCount)
			f30elem.PendingCount = &pendingCountCopy
			if f30iter.PlatformFamily != nil {
				f30elem.PlatformFamily = f30iter.PlatformFamily
			}
			if f30iter.PlatformVersion != nil {
				f30elem.PlatformVersion = f30iter.PlatformVersion
			}
			runningCountCopy := int64(f30iter.RunningCount)
			f30elem.RunningCount = &runningCountCopy
			if f30iter.Scale != nil {
				f30elemf13 := &svcapitypes.Scale{}
				if f30iter.Scale.Unit != "" {
					f30elemf13.Unit = aws.String(string(f30iter.Scale.Unit))
				}
				f30elemf13.Value = &f30iter.Scale.Value
				f30elem.Scale = f30elemf13
			}
			if f30iter.ServiceArn != nil {
				f30elem.ServiceARN = f30iter.ServiceArn
			}
			if f30iter.ServiceRegistries != nil {
				f30elemf15 := []*svcapitypes.ServiceRegistry{}
				for _, f30elemf15iter := range f30iter.ServiceRegistries {
					f30elemf15elem := &svcapitypes.ServiceRegistry{}
					if f30elemf15iter.ContainerName != nil {
						f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
					}
					if f30elemf15iter.ContainerPort != nil {
						containerPortCopy := int64(*f30elemf15iter.ContainerPort)
						f30elemf15elem.ContainerPort = &containerPortCopy
					}
					if f30elemf15iter.Port != nil {
						portCopy := int64(*f30elemf15iter.Port)
						f30elemf15elem.Port = &portCopy
					}
					if f30elemf15iter.RegistryArn != nil {
						f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
					}
					f30elemf15 = append(f30elemf15, f30elemf15elem)
				}
				f30elem.ServiceRegistries = f30elemf15
			}
			if f30iter.StabilityStatus != "" {
				f30elem.StabilityStatus = aws.String(string(f30iter.StabilityStatus))
			}
			if f30iter.StabilityStatusAt != nil {
				f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
			}
			if f30iter.StartedBy != nil {
				f30elem.StartedBy = f30iter.StartedBy
			}
			if f30iter.Status != nil {
				f30elem.Status = f30iter.Status
			}
			if f30iter.Tags != nil {
				f30elemf20 := []*svcapitypes.Tag{}
				for _, f30elemf20iter := range f30iter.Tags {
					f30elemf20elem := &svcapitypes.Tag{}
					if f30elemf20iter.Key != nil {
						f30elemf20elem.Key = f30elemf20iter.Key
					}
					if f30elemf20iter.Value != nil {
						f30elemf20elem.Value = f30elemf20iter.Value
					}
					f30elemf20 = append(f30elemf20, f30elemf20elem)
				}
				f30elem.Tags = f30elemf20
			}
			if f30iter.TaskDefinition != nil {
				f30elem.TaskDefinition = f30iter.TaskDefinition
			}
			if f30iter.TaskSetArn != nil {
				f30elem.TaskSetARN = f30iter.TaskSetArn
			}
			if f30iter.UpdatedAt != nil {
				f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
			}
			f30 = append(f30, f30elem)
		}
		ko.Status.TaskSets = f30
	} else {
		ko.Status.TaskSets = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateServiceInput, error) {
	res := &svcsdk.CreateServiceInput{}

	if r.ko.Spec.CapacityProviderStrategy != nil {
		f0 := []svcsdktypes.CapacityProviderStrategyItem{}
		for _, f0iter := range r.ko.Spec.CapacityProviderStrategy {
			f0elem := &svcsdktypes.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				baseCopy0 := *f0iter.Base
				if baseCopy0 > math.MaxInt32 || baseCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field base is of type int32")
				}
				baseCopy := int32(baseCopy0)
				f0elem.Base = baseCopy
			}
			if f0iter.CapacityProvider != nil {
				f0elem.CapacityProvider = f0iter.CapacityProvider
			}
			if f0iter.Weight != nil {
				weightCopy0 := *f0iter.Weight
				if weightCopy0 > math.MaxInt32 || weightCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field weight is of type int32")
				}
				weightCopy := int32(weightCopy0)
				f0elem.Weight = weightCopy
			}
			f0 = append(f0, *f0elem)
		}
		res.CapacityProviderStrategy = f0
	}
	if r.ko.Spec.Cluster != nil {
		res.Cluster = r.ko.Spec.Cluster
	}
	if r.ko.Spec.DeploymentConfiguration != nil {
		f2 := &svcsdktypes.DeploymentConfiguration{}
		if r.ko.Spec.DeploymentConfiguration.Alarms != nil {
			f2f0 := &svcsdktypes.DeploymentAlarms{}
			if r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f2f0.AlarmNames = aws.ToStringSlice(r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Enable != nil {
				f2f0.Enable = *r.ko.Spec.DeploymentConfiguration.Alarms.Enable
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Rollback != nil {
				f2f0.Rollback = *r.ko.Spec.DeploymentConfiguration.Alarms.Rollback
			}
			f2.Alarms = f2f0
		}
		if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f2f1 := &svcsdktypes.DeploymentCircuitBreaker{}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f2f1.Enable = *r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f2f1.Rollback = *r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			}
			f2.DeploymentCircuitBreaker = f2f1
		}
		if r.ko.Spec.DeploymentConfiguration.MaximumPercent != nil {
			maximumPercentCopy0 := *r.ko.Spec.DeploymentConfiguration.MaximumPercent
			if maximumPercentCopy0 > math.MaxInt32 || maximumPercentCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field maximumPercent is of type int32")
			}
			maximumPercentCopy := int32(maximumPercentCopy0)
			f2.MaximumPercent = &maximumPercentCopy
		}
		if r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent != nil {
			minimumHealthyPercentCopy0 := *r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent
			if minimumHealthyPercentCopy0 > math.MaxInt32 || minimumHealthyPercentCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field minimumHealthyPercent is of type int32")
			}
			minimumHealthyPercentCopy := int32(minimumHealthyPercentCopy0)
			f2.MinimumHealthyPercent = &minimumHealthyPercentCopy
		}
		res.DeploymentConfiguration = f2
	}
	if r.ko.Spec.DeploymentController != nil {
		f3 := &svcsdktypes.DeploymentController{}
		if r.ko.Spec.DeploymentController.Type != nil {
			f3.Type = svcsdktypes.DeploymentControllerType(*r.ko.Spec.DeploymentController.Type)
		}
		res.DeploymentController = f3
	}
	if r.ko.Spec.DesiredCount != nil {
		desiredCountCopy0 := *r.ko.Spec.DesiredCount
		if desiredCountCopy0 > math.MaxInt32 || desiredCountCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field desiredCount is of type int32")
		}
		desiredCountCopy := int32(desiredCountCopy0)
		res.DesiredCount = &desiredCountCopy
	}
	if r.ko.Spec.EnableECSManagedTags != nil {
		res.EnableECSManagedTags = *r.ko.Spec.EnableECSManagedTags
	}
	if r.ko.Spec.EnableExecuteCommand != nil {
		res.EnableExecuteCommand = *r.ko.Spec.EnableExecuteCommand
	}
	if r.ko.Spec.HealthCheckGracePeriodSeconds != nil {
		healthCheckGracePeriodSecondsCopy0 := *r.ko.Spec.HealthCheckGracePeriodSeconds
		if healthCheckGracePeriodSecondsCopy0 > math.MaxInt32 || healthCheckGracePeriodSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field healthCheckGracePeriodSeconds is of type int32")
		}
		healthCheckGracePeriodSecondsCopy := int32(healthCheckGracePeriodSecondsCopy0)
		res.HealthCheckGracePeriodSeconds = &healthCheckGracePeriodSecondsCopy
	}
	if r.ko.Spec.LaunchType != nil {
		res.LaunchType = svcsdktypes.LaunchType(*r.ko.Spec.LaunchType)
	}
	if r.ko.Spec.LoadBalancers != nil {
		f9 := []svcsdktypes.LoadBalancer{}
		for _, f9iter := range r.ko.Spec.LoadBalancers {
			f9elem := &svcsdktypes.LoadBalancer{}
			if f9iter.ContainerName != nil {
				f9elem.ContainerName = f9iter.ContainerName
			}
			if f9iter.ContainerPort != nil {
				containerPortCopy0 := *f9iter.ContainerPort
				if containerPortCopy0 > math.MaxInt32 || containerPortCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field containerPort is of type int32")
				}
				containerPortCopy := int32(containerPortCopy0)
				f9elem.ContainerPort = &containerPortCopy
			}
			if f9iter.LoadBalancerName != nil {
				f9elem.LoadBalancerName = f9iter.LoadBalancerName
			}
			if f9iter.TargetGroupARN != nil {
				f9elem.TargetGroupArn = f9iter.TargetGroupARN
			}
			f9 = append(f9, *f9elem)
		}
		res.LoadBalancers = f9
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f10 := &svcsdktypes.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration != nil {
			f10f0 := &svcsdktypes.AwsVpcConfiguration{}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
				f10f0.AssignPublicIp = svcsdktypes.AssignPublicIp(*r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
				f10f0.SecurityGroups = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
				f10f0.Subnets = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets)
			}
			f10.AwsvpcConfiguration = f10f0
		}
		res.NetworkConfiguration = f10
	}
	if r.ko.Spec.PlacementConstraints != nil {
		f11 := []svcsdktypes.PlacementConstraint{}
		for _, f11iter := range r.ko.Spec.PlacementConstraints {
			f11elem := &svcsdktypes.PlacementConstraint{}
			if f11iter.Expression != nil {
				f11elem.Expression = f11iter.Expression
			}
			if f11iter.Type != nil {
				f11elem.Type = svcsdktypes.PlacementConstraintType(*f11iter.Type)
			}
			f11 = append(f11, *f11elem)
		}
		res.PlacementConstraints = f11
	}
	if r.ko.Spec.PlacementStrategy != nil {
		f12 := []svcsdktypes.PlacementStrategy{}
		for _, f12iter := range r.ko.Spec.PlacementStrategy {
			f12elem := &svcsdktypes.PlacementStrategy{}
			if f12iter.Field != nil {
				f12elem.Field = f12iter.Field
			}
			if f12iter.Type != nil {
				f12elem.Type = svcsdktypes.PlacementStrategyType(*f12iter.Type)
			}
			f12 = append(f12, *f12elem)
		}
		res.PlacementStrategy = f12
	}
	if r.ko.Spec.PlatformVersion != nil {
		res.PlatformVersion = r.ko.Spec.PlatformVersion
	}
	if r.ko.Spec.PropagateTags != nil {
		res.PropagateTags = svcsdktypes.PropagateTags(*r.ko.Spec.PropagateTags)
	}
	if r.ko.Spec.Role != nil {
		res.Role = r.ko.Spec.Role
	}
	if r.ko.Spec.SchedulingStrategy != nil {
		res.SchedulingStrategy = svcsdktypes.SchedulingStrategy(*r.ko.Spec.SchedulingStrategy)
	}
	if r.ko.Spec.ServiceConnectConfiguration != nil {
		f17 := &svcsdktypes.ServiceConnectConfiguration{}
		if r.ko.Spec.ServiceConnectConfiguration.Enabled != nil {
			f17.Enabled = *r.ko.Spec.ServiceConnectConfiguration.Enabled
		}
		if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration != nil {
			f17f1 := &svcsdktypes.LogConfiguration{}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
				f17f1.LogDriver = svcsdktypes.LogDriver(*r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options != nil {
				f17f1.Options = aws.ToStringMap(r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
				f17f1f2 := []svcsdktypes.Secret{}
				for _, f17f1f2iter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
					f17f1f2elem := &svcsdktypes.Secret{}
					if f17f1f2iter.Name != nil {
						f17f1f2elem.Name = f17f1f2iter.Name
					}
					if f17f1f2iter.ValueFrom != nil {
						f17f1f2elem.ValueFrom = f17f1f2iter.ValueFrom
					}
					f17f1f2 = append(f17f1f2, *f17f1f2elem)
				}
				f17f1.SecretOptions = f17f1f2
			}
			f17.LogConfiguration = f17f1
		}
		if r.ko.Spec.ServiceConnectConfiguration.Namespace != nil {
			f17.Namespace = r.ko.Spec.ServiceConnectConfiguration.Namespace
		}
		if r.ko.Spec.ServiceConnectConfiguration.Services != nil {
			f17f3 := []svcsdktypes.ServiceConnectService{}
			for _, f17f3iter := range r.ko.Spec.ServiceConnectConfiguration.Services {
				f17f3elem := &svcsdktypes.ServiceConnectService{}
				if f17f3iter.ClientAliases != nil {
					f17f3elemf0 := []svcsdktypes.ServiceConnectClientAlias{}
					for _, f17f3elemf0iter := range f17f3iter.ClientAliases {
						f17f3elemf0elem := &svcsdktypes.ServiceConnectClientAlias{}
						if f17f3elemf0iter.DNSName != nil {
							f17f3elemf0elem.DnsName = f17f3elemf0iter.DNSName
						}
						if f17f3elemf0iter.Port != nil {
							portCopy0 := *f17f3elemf0iter.Port
							if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field port is of type int32")
							}
							portCopy := int32(portCopy0)
							f17f3elemf0elem.Port = &portCopy
						}
						f17f3elemf0 = append(f17f3elemf0, *f17f3elemf0elem)
					}
					f17f3elem.ClientAliases = f17f3elemf0
				}
				if f17f3iter.DiscoveryName != nil {
					f17f3elem.DiscoveryName = f17f3iter.DiscoveryName
				}
				if f17f3iter.IngressPortOverride != nil {
					ingressPortOverrideCopy0 := *f17f3iter.IngressPortOverride
					if ingressPortOverrideCopy0 > math.MaxInt32 || ingressPortOverrideCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field ingressPortOverride is of type int32")
					}
					ingressPortOverrideCopy := int32(ingressPortOverrideCopy0)
					f17f3elem.IngressPortOverride = &ingressPortOverrideCopy
				}
				if f17f3iter.PortName != nil {
					f17f3elem.PortName = f17f3iter.PortName
				}
				if f17f3iter.Timeout != nil {
					f17f3elemf4 := &svcsdktypes.TimeoutConfiguration{}
					if f17f3iter.Timeout.IdleTimeoutSeconds != nil {
						idleTimeoutSecondsCopy0 := *f17f3iter.Timeout.IdleTimeoutSeconds
						if idleTimeoutSecondsCopy0 > math.MaxInt32 || idleTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field idleTimeoutSeconds is of type int32")
						}
						idleTimeoutSecondsCopy := int32(idleTimeoutSecondsCopy0)
						f17f3elemf4.IdleTimeoutSeconds = &idleTimeoutSecondsCopy
					}
					if f17f3iter.Timeout.PerRequestTimeoutSeconds != nil {
						perRequestTimeoutSecondsCopy0 := *f17f3iter.Timeout.PerRequestTimeoutSeconds
						if perRequestTimeoutSecondsCopy0 > math.MaxInt32 || perRequestTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field perRequestTimeoutSeconds is of type int32")
						}
						perRequestTimeoutSecondsCopy := int32(perRequestTimeoutSecondsCopy0)
						f17f3elemf4.PerRequestTimeoutSeconds = &perRequestTimeoutSecondsCopy
					}
					f17f3elem.Timeout = f17f3elemf4
				}
				if f17f3iter.TLS != nil {
					f17f3elemf5 := &svcsdktypes.ServiceConnectTlsConfiguration{}
					if f17f3iter.TLS.IssuerCertificateAuthority != nil {
						f17f3elemf5f0 := &svcsdktypes.ServiceConnectTlsCertificateAuthority{}
						if f17f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN != nil {
							f17f3elemf5f0.AwsPcaAuthorityArn = f17f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN
						}
						f17f3elemf5.IssuerCertificateAuthority = f17f3elemf5f0
					}
					if f17f3iter.TLS.KMSKey != nil {
						f17f3elemf5.KmsKey = f17f3iter.TLS.KMSKey
					}
					if f17f3iter.TLS.RoleARN != nil {
						f17f3elemf5.RoleArn = f17f3iter.TLS.RoleARN
					}
					f17f3elem.Tls = f17f3elemf5
				}
				f17f3 = append(f17f3, *f17f3elem)
			}
			f17.Services = f17f3
		}
		res.ServiceConnectConfiguration = f17
	}
	if r.ko.Spec.Name != nil {
		res.ServiceName = r.ko.Spec.Name
	}
	if r.ko.Spec.ServiceRegistries != nil {
		f19 := []svcsdktypes.ServiceRegistry{}
		for _, f19iter := range r.ko.Spec.ServiceRegistries {
			f19elem := &svcsdktypes.ServiceRegistry{}
			if f19iter.ContainerName != nil {
				f19elem.ContainerName = f19iter.ContainerName
			}
			if f19iter.ContainerPort != nil {
				containerPortCopy0 := *f19iter.ContainerPort
				if containerPortCopy0 > math.MaxInt32 || containerPortCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field containerPort is of type int32")
				}
				containerPortCopy := int32(containerPortCopy0)
				f19elem.ContainerPort = &containerPortCopy
			}
			if f19iter.Port != nil {
				portCopy0 := *f19iter.Port
				if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field port is of type int32")
				}
				portCopy := int32(portCopy0)
				f19elem.Port = &portCopy
			}
			if f19iter.RegistryARN != nil {
				f19elem.RegistryArn = f19iter.RegistryARN
			}
			f19 = append(f19, *f19elem)
		}
		res.ServiceRegistries = f19
	}
	if r.ko.Spec.Tags != nil {
		f20 := []svcsdktypes.Tag{}
		for _, f20iter := range r.ko.Spec.Tags {
			f20elem := &svcsdktypes.Tag{}
			if f20iter.Key != nil {
				f20elem.Key = f20iter.Key
			}
			if f20iter.Value != nil {
				f20elem.Value = f20iter.Value
			}
			f20 = append(f20, *f20elem)
		}
		res.Tags = f20
	}
	if r.ko.Spec.TaskDefinition != nil {
		res.TaskDefinition = r.ko.Spec.TaskDefinition
	}
	if r.ko.Spec.VolumeConfigurations != nil {
		f22 := []svcsdktypes.ServiceVolumeConfiguration{}
		for _, f22iter := range r.ko.Spec.VolumeConfigurations {
			f22elem := &svcsdktypes.ServiceVolumeConfiguration{}
			if f22iter.ManagedEBSVolume != nil {
				f22elemf0 := &svcsdktypes.ServiceManagedEBSVolumeConfiguration{}
				if f22iter.ManagedEBSVolume.Encrypted != nil {
					f22elemf0.Encrypted = f22iter.ManagedEBSVolume.Encrypted
				}
				if f22iter.ManagedEBSVolume.FilesystemType != nil {
					f22elemf0.FilesystemType = svcsdktypes.TaskFilesystemType(*f22iter.ManagedEBSVolume.FilesystemType)
				}
				if f22iter.ManagedEBSVolume.IOPS != nil {
					iopsCopy0 := *f22iter.ManagedEBSVolume.IOPS
					if iopsCopy0 > math.MaxInt32 || iopsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field iops is of type int32")
					}
					iopsCopy := int32(iopsCopy0)
					f22elemf0.Iops = &iopsCopy
				}
				if f22iter.ManagedEBSVolume.KMSKeyID != nil {
					f22elemf0.KmsKeyId = f22iter.ManagedEBSVolume.KMSKeyID
				}
				if f22iter.ManagedEBSVolume.RoleARN != nil {
					f22elemf0.RoleArn = f22iter.ManagedEBSVolume.RoleARN
				}
				if f22iter.ManagedEBSVolume.SizeInGiB != nil {
					sizeInGiBCopy0 := *f22iter.ManagedEBSVolume.SizeInGiB
					if sizeInGiBCopy0 > math.MaxInt32 || sizeInGiBCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field sizeInGiB is of type int32")
					}
					sizeInGiBCopy := int32(sizeInGiBCopy0)
					f22elemf0.SizeInGiB = &sizeInGiBCopy
				}
				if f22iter.ManagedEBSVolume.SnapshotID != nil {
					f22elemf0.SnapshotId = f22iter.ManagedEBSVolume.SnapshotID
				}
				if f22iter.ManagedEBSVolume.TagSpecifications != nil {
					f22elemf0f7 := []svcsdktypes.EBSTagSpecification{}
					for _, f22elemf0f7iter := range f22iter.ManagedEBSVolume.TagSpecifications {
						f22elemf0f7elem := &svcsdktypes.EBSTagSpecification{}
						if f22elemf0f7iter.PropagateTags != nil {
							f22elemf0f7elem.PropagateTags = svcsdktypes.PropagateTags(*f22elemf0f7iter.PropagateTags)
						}
						if f22elemf0f7iter.ResourceType != nil {
							f22elemf0f7elem.ResourceType = svcsdktypes.EBSResourceType(*f22elemf0f7iter.ResourceType)
						}
						if f22elemf0f7iter.Tags != nil {
							f22elemf0f7elemf2 := []svcsdktypes.Tag{}
							for _, f22elemf0f7elemf2iter := range f22elemf0f7iter.Tags {
								f22elemf0f7elemf2elem := &svcsdktypes.Tag{}
								if f22elemf0f7elemf2iter.Key != nil {
									f22elemf0f7elemf2elem.Key = f22elemf0f7elemf2iter.Key
								}
								if f22elemf0f7elemf2iter.Value != nil {
									f22elemf0f7elemf2elem.Value = f22elemf0f7elemf2iter.Value
								}
								f22elemf0f7elemf2 = append(f22elemf0f7elemf2, *f22elemf0f7elemf2elem)
							}
							f22elemf0f7elem.Tags = f22elemf0f7elemf2
						}
						f22elemf0f7 = append(f22elemf0f7, *f22elemf0f7elem)
					}
					f22elemf0.TagSpecifications = f22elemf0f7
				}
				if f22iter.ManagedEBSVolume.Throughput != nil {
					throughputCopy0 := *f22iter.ManagedEBSVolume.Throughput
					if throughputCopy0 > math.MaxInt32 || throughputCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field throughput is of type int32")
					}
					throughputCopy := int32(throughputCopy0)
					f22elemf0.Throughput = &throughputCopy
				}
				if f22iter.ManagedEBSVolume.VolumeType != nil {
					f22elemf0.VolumeType = f22iter.ManagedEBSVolume.VolumeType
				}
				f22elem.ManagedEBSVolume = f22elemf0
			}
			if f22iter.Name != nil {
				f22elem.Name = f22iter.Name
			}
			f22 = append(f22, *f22elem)
		}
		res.VolumeConfigurations = f22
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if desired.ko.Spec.Name != nil {
		input.Service = desired.ko.Spec.Name
	}

	var resp *svcsdk.UpdateServiceOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateService(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateService", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Service.CapacityProviderStrategy != nil {
		f0 := []*svcapitypes.CapacityProviderStrategyItem{}
		for _, f0iter := range resp.Service.CapacityProviderStrategy {
			f0elem := &svcapitypes.CapacityProviderStrategyItem{}
			baseCopy := int64(f0iter.Base)
			f0elem.Base = &baseCopy
			if f0iter.CapacityProvider != nil {
				f0elem.CapacityProvider = f0iter.CapacityProvider
			}
			weightCopy := int64(f0iter.Weight)
			f0elem.Weight = &weightCopy
			f0 = append(f0, f0elem)
		}
		ko.Spec.CapacityProviderStrategy = f0
	} else {
		ko.Spec.CapacityProviderStrategy = nil
	}
	if resp.Service.ClusterArn != nil {
		ko.Status.ClusterARN = resp.Service.ClusterArn
	} else {
		ko.Status.ClusterARN = nil
	}
	if resp.Service.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Service.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Service.CreatedBy != nil {
		ko.Status.CreatedBy = resp.Service.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.Service.DeploymentConfiguration != nil {
		f4 := &svcapitypes.DeploymentConfiguration{}
		if resp.Service.DeploymentConfiguration.Alarms != nil {
			f4f0 := &svcapitypes.DeploymentAlarms{}
			if resp.Service.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f4f0.AlarmNames = aws.StringSlice(resp.Service.DeploymentConfiguration.Alarms.AlarmNames)
			}
			f4f0.Enable = &resp.Service.DeploymentConfiguration.Alarms.Enable
			f4f0.Rollback = &resp.Service.DeploymentConfiguration.Alarms.Rollback
			f4.Alarms = f4f0
		}
		if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
			f4f1.Enable = &resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			f4f1.Rollback = &resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			f4.DeploymentCircuitBreaker = f4f1
		}
		if resp.Service.DeploymentConfiguration.MaximumPercent != nil {
			maximumPercentCopy := int64(*resp.Service.DeploymentConfiguration.MaximumPercent)
			f4.MaximumPercent = &maximumPercentCopy
		}
		if resp.Service.DeploymentConfiguration.MinimumHealthyPercent != nil {
			minimumHealthyPercentCopy := int64(*resp.Service.DeploymentConfiguration.MinimumHealthyPercent)
			f4.MinimumHealthyPercent = &minimumHealthyPercentCopy
		}
		ko.Spec.DeploymentConfiguration = f4
	} else {
		ko.Spec.DeploymentConfiguration = nil
	}
	if resp.Service.DeploymentController != nil {
		f5 := &svcapitypes.DeploymentController{}
		if resp.Service.DeploymentController.Type != "" {
			f5.Type = aws.String(string(resp.Service.DeploymentController.Type))
		}
		ko.Spec.DeploymentController = f5
	} else {
		ko.Spec.DeploymentController = nil
	}
	if resp.Service.Deployments != nil {
		f6 := []*svcapitypes.Deployment{}
		for _, f6iter := range resp.Service.Deployments {
			f6elem := &svcapitypes.Deployment{}
			if f6iter.CapacityProviderStrategy != nil {
				f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
					f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					baseCopy := int64(f6elemf0iter.Base)
					f6elemf0elem.Base = &baseCopy
					if f6elemf0iter.CapacityProvider != nil {
						f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
					}
					weightCopy := int64(f6elemf0iter.Weight)
					f6elemf0elem.Weight = &weightCopy
					f6elemf0 = append(f6elemf0, f6elemf0elem)
				}
				f6elem.CapacityProviderStrategy = f6elemf0
			}
			if f6iter.CreatedAt != nil {
				f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
			}
			desiredCountCopy := int64(f6iter.DesiredCount)
			f6elem.DesiredCount = &desiredCountCopy
			failedTasksCopy := int64(f6iter.FailedTasks)
			f6elem.FailedTasks = &failedTasksCopy
			if f6iter.Id != nil {
				f6elem.ID = f6iter.Id
			}
			if f6iter.LaunchType != "" {
				f6elem.LaunchType = aws.String(string(f6iter.LaunchType))
			}
			if f6iter.NetworkConfiguration != nil {
				f6elemf6 := &svcapitypes.NetworkConfiguration{}
				if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
						f6elemf6f0.AssignPublicIP = aws.String(string(f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f6elemf6f0.SecurityGroups = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f6elemf6f0.Subnets = aws.StringSlice(f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
					}
					f6elemf6.AWSVPCConfiguration = f6elemf6f0
				}
				f6elem.NetworkConfiguration = f6elemf6
			}
			pendingCountCopy := int64(f6iter.PendingCount)
			f6elem.PendingCount = &pendingCountCopy
			if f6iter.PlatformFamily != nil {
				f6elem.PlatformFamily = f6iter.PlatformFamily
			}
			if f6iter.PlatformVersion != nil {
				f6elem.PlatformVersion = f6iter.PlatformVersion
			}
			if f6iter.RolloutState != "" {
				f6elem.RolloutState = aws.String(string(f6iter.RolloutState))
			}
			if f6iter.RolloutStateReason != nil {
				f6elem.RolloutStateReason = f6iter.RolloutStateReason
			}
			runningCountCopy := int64(f6iter.RunningCount)
			f6elem.RunningCount = &runningCountCopy
			if f6iter.ServiceConnectConfiguration != nil {
				f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
				f6elemf13.Enabled = &f6iter.ServiceConnectConfiguration.Enabled
				if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
					f6elemf13f1 := &svcapitypes.LogConfiguration{}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != "" {
						f6elemf13f1.LogDriver = aws.String(string(f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver))
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
						f6elemf13f1.Options = aws.StringMap(f6iter.ServiceConnectConfiguration.LogConfiguration.Options)
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
						f6elemf13f1f2 := []*svcapitypes.Secret{}
						for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
							f6elemf13f1f2elem := &svcapitypes.Secret{}
							if f6elemf13f1f2iter.Name != nil {
								f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
							}
							if f6elemf13f1f2iter.ValueFrom != nil {
								f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
							}
							f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
						}
						f6elemf13f1.SecretOptions = f6elemf13f1f2
					}
					f6elemf13.LogConfiguration = f6elemf13f1
				}
				if f6iter.ServiceConnectConfiguration.Namespace != nil {
					f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
				}
				if f6iter.ServiceConnectConfiguration.Services != nil {
					f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
					for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
						f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
						if f6elemf13f3iter.ClientAliases != nil {
							f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
							for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
								f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
								if f6elemf13f3elemf0iter.DnsName != nil {
									f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
								}
								if f6elemf13f3elemf0iter.Port != nil {
									portCopy := int64(*f6elemf13f3elemf0iter.Port)
									f6elemf13f3elemf0elem.Port = &portCopy
								}
								f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
							}
							f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
						}
						if f6elemf13f3iter.DiscoveryName != nil {
							f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
						}
						if f6elemf13f3iter.IngressPortOverride != nil {
							ingressPortOverrideCopy := int64(*f6elemf13f3iter.IngressPortOverride)
							f6elemf13f3elem.IngressPortOverride = &ingressPortOverrideCopy
						}
						if f6elemf13f3iter.PortName != nil {
							f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
						}
						if f6elemf13f3iter.Timeout != nil {
							f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
							if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
								idleTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.IdleTimeoutSeconds)
								f6elemf13f3elemf4.IdleTimeoutSeconds = &idleTimeoutSecondsCopy
							}
							if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
								perRequestTimeoutSecondsCopy := int64(*f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds)
								f6elemf13f3elemf4.PerRequestTimeoutSeconds = &perRequestTimeoutSecondsCopy
							}
							f6elemf13f3elem.Timeout = f6elemf13f3elemf4
						}
						if f6elemf13f3iter.Tls != nil {
							f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
							if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
								f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
									f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
								}
								f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
							}
							if f6elemf13f3iter.Tls.KmsKey != nil {
								f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
							}
							if f6elemf13f3iter.Tls.RoleArn != nil {
								f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
							}
							f6elemf13f3elem.TLS = f6elemf13f3elemf5
						}
						f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
					}
					f6elemf13.Services = f6elemf13f3
				}
				f6elem.ServiceConnectConfiguration = f6elemf13
			}
			if f6iter.ServiceConnectResources != nil {
				f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
				for _, f6elemf14iter := range f6iter.ServiceConnectResources {
					f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
					if f6elemf14iter.DiscoveryArn != nil {
						f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
					}
					if f6elemf14iter.DiscoveryName != nil {
						f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
					}
					f6elemf14 = append(f6elemf14, f6elemf14elem)
				}
				f6elem.ServiceConnectResources = f6elemf14
			}
			if f6iter.Status != nil {
				f6elem.Status = f6iter.Status
			}
			if f6iter.TaskDefinition != nil {
				f6elem.TaskDefinition = f6iter.TaskDefinition
			}
			if f6iter.UpdatedAt != nil {
				f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
			}
			if f6iter.VolumeConfigurations != nil {
				f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
				for _, f6elemf18iter := range f6iter.VolumeConfigurations {
					f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
					if f6elemf18iter.ManagedEBSVolume != nil {
						f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
							f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
						}
						if f6elemf18iter.ManagedEBSVolume.FilesystemType != "" {
							f6elemf18elemf0.FilesystemType = aws.String(string(f6elemf18iter.ManagedEBSVolume.FilesystemType))
						}
						if f6elemf18iter.ManagedEBSVolume.Iops != nil {
							iopsCopy := int64(*f6elemf18iter.ManagedEBSVolume.Iops)
							f6elemf18elemf0.IOPS = &iopsCopy
						}
						if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
							f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
						}
						if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
							f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
						}
						if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
							sizeInGiBCopy := int64(*f6elemf18iter.ManagedEBSVolume.SizeInGiB)
							f6elemf18elemf0.SizeInGiB = &sizeInGiBCopy
						}
						if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
							f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
						}
						if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
							f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
							for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
								f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
								if f6elemf18elemf0f7iter.PropagateTags != "" {
									f6elemf18elemf0f7elem.PropagateTags = aws.String(string(f6elemf18elemf0f7iter.PropagateTags))
								}
								if f6elemf18elemf0f7iter.ResourceType != "" {
									f6elemf18elemf0f7elem.ResourceType = aws.String(string(f6elemf18elemf0f7iter.ResourceType))
								}
								if f6elemf18elemf0f7iter.Tags != nil {
									f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
									for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
										f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
										if f6elemf18elemf0f7elemf2iter.Key != nil {
											f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
										}
										if f6elemf18elemf0f7elemf2iter.Value != nil {
											f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
										}
										f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
									}
									f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
								}
								f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
							}
							f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
						}
						if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
							throughputCopy := int64(*f6elemf18iter.ManagedEBSVolume.Throughput)
							f6elemf18elemf0.Throughput = &throughputCopy
						}
						if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
							f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
						}
						f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
					}
					if f6elemf18iter.Name != nil {
						f6elemf18elem.Name = f6elemf18iter.Name
					}
					f6elemf18 = append(f6elemf18, f6elemf18elem)
				}
				f6elem.VolumeConfigurations = f6elemf18
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Deployments = f6
	} else {
		ko.Status.Deployments = nil
	}
	desiredCountCopy := int64(resp.Service.DesiredCount)
	ko.Spec.DesiredCount = &desiredCountCopy
	ko.Spec.EnableECSManagedTags = &resp.Service.EnableECSManagedTags
	ko.Spec.EnableExecuteCommand = &resp.Service.EnableExecuteCommand
	if resp.Service.Events != nil {
		f10 := []*svcapitypes.ServiceEvent{}
		for _, f10iter := range resp.Service.Events {
			f10elem := &svcapitypes.ServiceEvent{}
			if f10iter.CreatedAt != nil {
				f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
			}
			if f10iter.Id != nil {
				f10elem.ID = f10iter.Id
			}
			if f10iter.Message != nil {
				f10elem.Message = f10iter.Message
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Events = f10
	} else {
		ko.Status.Events = nil
	}
	if resp.Service.HealthCheckGracePeriodSeconds != nil {
		healthCheckGracePeriodSecondsCopy := int64(*resp.Service.HealthCheckGracePeriodSeconds)
		ko.Spec.HealthCheckGracePeriodSeconds = &healthCheckGracePeriodSecondsCopy
	} else {
		ko.Spec.HealthCheckGracePeriodSeconds = nil
	}
	if resp.Service.LaunchType != "" {
		ko.Spec.LaunchType = aws.String(string(resp.Service.LaunchType))
	} else {
		ko.Spec.LaunchType = nil
	}
	if resp.Service.LoadBalancers != nil {
		f13 := []*svcapitypes.LoadBalancer{}
		for _, f13iter := range resp.Service.LoadBalancers {
			f13elem := &svcapitypes.LoadBalancer{}
			if f13iter.ContainerName != nil {
				f13elem.ContainerName = f13iter.ContainerName
			}
			if f13iter.ContainerPort != nil {
				containerPortCopy := int64(*f13iter.ContainerPort)
				f13elem.ContainerPort = &containerPortCopy
			}
			if f13iter.LoadBalancerName != nil {
				f13elem.LoadBalancerName = f13iter.LoadBalancerName
			}
			if f13iter.TargetGroupArn != nil {
				f13elem.TargetGroupARN = f13iter.TargetGroupArn
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LoadBalancers = f13
	} else {
		ko.Spec.LoadBalancers = nil
	}
	if resp.Service.NetworkConfiguration != nil {
		f14 := &svcapitypes.NetworkConfiguration{}
		if resp.Service.NetworkConfiguration.AwsvpcConfiguration != nil {
			f14f0 := &svcapitypes.AWSVPCConfiguration{}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
				f14f0.AssignPublicIP = aws.String(string(resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
				f14f0.SecurityGroups = aws.StringSlice(resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
				f14f0.Subnets = aws.StringSlice(resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets)
			}
			f14.AWSVPCConfiguration = f14f0
		}
		ko.Spec.NetworkConfiguration = f14
	} else {
		ko.Spec.NetworkConfiguration = nil
	}
	pendingCountCopy := int64(resp.Service.PendingCount)
	ko.Status.PendingCount = &pendingCountCopy
	if resp.Service.PlacementConstraints != nil {
		f16 := []*svcapitypes.PlacementConstraint{}
		for _, f16iter := range resp.Service.PlacementConstraints {
			f16elem := &svcapitypes.PlacementConstraint{}
			if f16iter.Expression != nil {
				f16elem.Expression = f16iter.Expression
			}
			if f16iter.Type != "" {
				f16elem.Type = aws.String(string(f16iter.Type))
			}
			f16 = append(f16, f16elem)
		}
		ko.Spec.PlacementConstraints = f16
	} else {
		ko.Spec.PlacementConstraints = nil
	}
	if resp.Service.PlacementStrategy != nil {
		f17 := []*svcapitypes.PlacementStrategy{}
		for _, f17iter := range resp.Service.PlacementStrategy {
			f17elem := &svcapitypes.PlacementStrategy{}
			if f17iter.Field != nil {
				f17elem.Field = f17iter.Field
			}
			if f17iter.Type != "" {
				f17elem.Type = aws.String(string(f17iter.Type))
			}
			f17 = append(f17, f17elem)
		}
		ko.Spec.PlacementStrategy = f17
	} else {
		ko.Spec.PlacementStrategy = nil
	}
	if resp.Service.PlatformFamily != nil {
		ko.Status.PlatformFamily = resp.Service.PlatformFamily
	} else {
		ko.Status.PlatformFamily = nil
	}
	if resp.Service.PlatformVersion != nil {
		ko.Spec.PlatformVersion = resp.Service.PlatformVersion
	} else {
		ko.Spec.PlatformVersion = nil
	}
	if resp.Service.PropagateTags != "" {
		ko.Spec.PropagateTags = aws.String(string(resp.Service.PropagateTags))
	} else {
		ko.Spec.PropagateTags = nil
	}
	if resp.Service.RoleArn != nil {
		ko.Status.RoleARN = resp.Service.RoleArn
	} else {
		ko.Status.RoleARN = nil
	}
	runningCountCopy := int64(resp.Service.RunningCount)
	ko.Status.RunningCount = &runningCountCopy
	if resp.Service.SchedulingStrategy != "" {
		ko.Spec.SchedulingStrategy = aws.String(string(resp.Service.SchedulingStrategy))
	} else {
		ko.Spec.SchedulingStrategy = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Service.ServiceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Service.ServiceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Service.ServiceName != nil {
		ko.Spec.Name = resp.Service.ServiceName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Service.ServiceRegistries != nil {
		f26 := []*svcapitypes.ServiceRegistry{}
		for _, f26iter := range resp.Service.ServiceRegistries {
			f26elem := &svcapitypes.ServiceRegistry{}
			if f26iter.ContainerName != nil {
				f26elem.ContainerName = f26iter.ContainerName
			}
			if f26iter.ContainerPort != nil {
				containerPortCopy := int64(*f26iter.ContainerPort)
				f26elem.ContainerPort = &containerPortCopy
			}
			if f26iter.Port != nil {
				portCopy := int64(*f26iter.Port)
				f26elem.Port = &portCopy
			}
			if f26iter.RegistryArn != nil {
				f26elem.RegistryARN = f26iter.RegistryArn
			}
			f26 = append(f26, f26elem)
		}
		ko.Spec.ServiceRegistries = f26
	} else {
		ko.Spec.ServiceRegistries = nil
	}
	if resp.Service.Status != nil {
		ko.Status.Status = resp.Service.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.Service.Tags != nil {
		f28 := []*svcapitypes.Tag{}
		for _, f28iter := range resp.Service.Tags {
			f28elem := &svcapitypes.Tag{}
			if f28iter.Key != nil {
				f28elem.Key = f28iter.Key
			}
			if f28iter.Value != nil {
				f28elem.Value = f28iter.Value
			}
			f28 = append(f28, f28elem)
		}
		ko.Spec.Tags = f28
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Service.TaskDefinition != nil {
		ko.Spec.TaskDefinition = resp.Service.TaskDefinition
	} else {
		ko.Spec.TaskDefinition = nil
	}
	if resp.Service.TaskSets != nil {
		f30 := []*svcapitypes.TaskSet{}
		for _, f30iter := range resp.Service.TaskSets {
			f30elem := &svcapitypes.TaskSet{}
			if f30iter.CapacityProviderStrategy != nil {
				f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
					f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					baseCopy := int64(f30elemf0iter.Base)
					f30elemf0elem.Base = &baseCopy
					if f30elemf0iter.CapacityProvider != nil {
						f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
					}
					weightCopy := int64(f30elemf0iter.Weight)
					f30elemf0elem.Weight = &weightCopy
					f30elemf0 = append(f30elemf0, f30elemf0elem)
				}
				f30elem.CapacityProviderStrategy = f30elemf0
			}
			if f30iter.ClusterArn != nil {
				f30elem.ClusterARN = f30iter.ClusterArn
			}
			computedDesiredCountCopy := int64(f30iter.ComputedDesiredCount)
			f30elem.ComputedDesiredCount = &computedDesiredCountCopy
			if f30iter.CreatedAt != nil {
				f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
			}
			if f30iter.ExternalId != nil {
				f30elem.ExternalID = f30iter.ExternalId
			}
			if f30iter.Id != nil {
				f30elem.ID = f30iter.Id
			}
			if f30iter.LaunchType != "" {
				f30elem.LaunchType = aws.String(string(f30iter.LaunchType))
			}
			if f30iter.LoadBalancers != nil {
				f30elemf7 := []*svcapitypes.LoadBalancer{}
				for _, f30elemf7iter := range f30iter.LoadBalancers {
					f30elemf7elem := &svcapitypes.LoadBalancer{}
					if f30elemf7iter.ContainerName != nil {
						f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
					}
					if f30elemf7iter.ContainerPort != nil {
						containerPortCopy := int64(*f30elemf7iter.ContainerPort)
						f30elemf7elem.ContainerPort = &containerPortCopy
					}
					if f30elemf7iter.LoadBalancerName != nil {
						f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
					}
					if f30elemf7iter.TargetGroupArn != nil {
						f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
					}
					f30elemf7 = append(f30elemf7, f30elemf7elem)
				}
				f30elem.LoadBalancers = f30elemf7
			}
			if f30iter.NetworkConfiguration != nil {
				f30elemf8 := &svcapitypes.NetworkConfiguration{}
				if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
						f30elemf8f0.AssignPublicIP = aws.String(string(f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f30elemf8f0.SecurityGroups = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f30elemf8f0.Subnets = aws.StringSlice(f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets)
					}
					f30elemf8.AWSVPCConfiguration = f30elemf8f0
				}
				f30elem.NetworkConfiguration = f30elemf8
			}
			pendingCountCopy := int64(f30iter.PendingCount)
			f30elem.PendingCount = &pendingCountCopy
			if f30iter.PlatformFamily != nil {
				f30elem.PlatformFamily = f30iter.PlatformFamily
			}
			if f30iter.PlatformVersion != nil {
				f30elem.PlatformVersion = f30iter.PlatformVersion
			}
			runningCountCopy := int64(f30iter.RunningCount)
			f30elem.RunningCount = &runningCountCopy
			if f30iter.Scale != nil {
				f30elemf13 := &svcapitypes.Scale{}
				if f30iter.Scale.Unit != "" {
					f30elemf13.Unit = aws.String(string(f30iter.Scale.Unit))
				}
				f30elemf13.Value = &f30iter.Scale.Value
				f30elem.Scale = f30elemf13
			}
			if f30iter.ServiceArn != nil {
				f30elem.ServiceARN = f30iter.ServiceArn
			}
			if f30iter.ServiceRegistries != nil {
				f30elemf15 := []*svcapitypes.ServiceRegistry{}
				for _, f30elemf15iter := range f30iter.ServiceRegistries {
					f30elemf15elem := &svcapitypes.ServiceRegistry{}
					if f30elemf15iter.ContainerName != nil {
						f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
					}
					if f30elemf15iter.ContainerPort != nil {
						containerPortCopy := int64(*f30elemf15iter.ContainerPort)
						f30elemf15elem.ContainerPort = &containerPortCopy
					}
					if f30elemf15iter.Port != nil {
						portCopy := int64(*f30elemf15iter.Port)
						f30elemf15elem.Port = &portCopy
					}
					if f30elemf15iter.RegistryArn != nil {
						f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
					}
					f30elemf15 = append(f30elemf15, f30elemf15elem)
				}
				f30elem.ServiceRegistries = f30elemf15
			}
			if f30iter.StabilityStatus != "" {
				f30elem.StabilityStatus = aws.String(string(f30iter.StabilityStatus))
			}
			if f30iter.StabilityStatusAt != nil {
				f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
			}
			if f30iter.StartedBy != nil {
				f30elem.StartedBy = f30iter.StartedBy
			}
			if f30iter.Status != nil {
				f30elem.Status = f30iter.Status
			}
			if f30iter.Tags != nil {
				f30elemf20 := []*svcapitypes.Tag{}
				for _, f30elemf20iter := range f30iter.Tags {
					f30elemf20elem := &svcapitypes.Tag{}
					if f30elemf20iter.Key != nil {
						f30elemf20elem.Key = f30elemf20iter.Key
					}
					if f30elemf20iter.Value != nil {
						f30elemf20elem.Value = f30elemf20iter.Value
					}
					f30elemf20 = append(f30elemf20, f30elemf20elem)
				}
				f30elem.Tags = f30elemf20
			}
			if f30iter.TaskDefinition != nil {
				f30elem.TaskDefinition = f30iter.TaskDefinition
			}
			if f30iter.TaskSetArn != nil {
				f30elem.TaskSetARN = f30iter.TaskSetArn
			}
			if f30iter.UpdatedAt != nil {
				f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
			}
			f30 = append(f30, f30elem)
		}
		ko.Status.TaskSets = f30
	} else {
		ko.Status.TaskSets = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateServiceInput, error) {
	res := &svcsdk.UpdateServiceInput{}

	if r.ko.Spec.CapacityProviderStrategy != nil {
		f1 := []svcsdktypes.CapacityProviderStrategyItem{}
		for _, f1iter := range r.ko.Spec.CapacityProviderStrategy {
			f1elem := &svcsdktypes.CapacityProviderStrategyItem{}
			if f1iter.Base != nil {
				baseCopy0 := *f1iter.Base
				if baseCopy0 > math.MaxInt32 || baseCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field base is of type int32")
				}
				baseCopy := int32(baseCopy0)
				f1elem.Base = baseCopy
			}
			if f1iter.CapacityProvider != nil {
				f1elem.CapacityProvider = f1iter.CapacityProvider
			}
			if f1iter.Weight != nil {
				weightCopy0 := *f1iter.Weight
				if weightCopy0 > math.MaxInt32 || weightCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field weight is of type int32")
				}
				weightCopy := int32(weightCopy0)
				f1elem.Weight = weightCopy
			}
			f1 = append(f1, *f1elem)
		}
		res.CapacityProviderStrategy = f1
	}
	if r.ko.Spec.Cluster != nil {
		res.Cluster = r.ko.Spec.Cluster
	}
	if r.ko.Spec.DeploymentConfiguration != nil {
		f3 := &svcsdktypes.DeploymentConfiguration{}
		if r.ko.Spec.DeploymentConfiguration.Alarms != nil {
			f3f0 := &svcsdktypes.DeploymentAlarms{}
			if r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f3f0.AlarmNames = aws.ToStringSlice(r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Enable != nil {
				f3f0.Enable = *r.ko.Spec.DeploymentConfiguration.Alarms.Enable
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Rollback != nil {
				f3f0.Rollback = *r.ko.Spec.DeploymentConfiguration.Alarms.Rollback
			}
			f3.Alarms = f3f0
		}
		if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f3f1 := &svcsdktypes.DeploymentCircuitBreaker{}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f3f1.Enable = *r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f3f1.Rollback = *r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			}
			f3.DeploymentCircuitBreaker = f3f1
		}
		if r.ko.Spec.DeploymentConfiguration.MaximumPercent != nil {
			maximumPercentCopy0 := *r.ko.Spec.DeploymentConfiguration.MaximumPercent
			if maximumPercentCopy0 > math.MaxInt32 || maximumPercentCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field maximumPercent is of type int32")
			}
			maximumPercentCopy := int32(maximumPercentCopy0)
			f3.MaximumPercent = &maximumPercentCopy
		}
		if r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent != nil {
			minimumHealthyPercentCopy0 := *r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent
			if minimumHealthyPercentCopy0 > math.MaxInt32 || minimumHealthyPercentCopy0 < math.MinInt32 {
				return nil, fmt.Errorf("error: field minimumHealthyPercent is of type int32")
			}
			minimumHealthyPercentCopy := int32(minimumHealthyPercentCopy0)
			f3.MinimumHealthyPercent = &minimumHealthyPercentCopy
		}
		res.DeploymentConfiguration = f3
	}
	if r.ko.Spec.DesiredCount != nil {
		desiredCountCopy0 := *r.ko.Spec.DesiredCount
		if desiredCountCopy0 > math.MaxInt32 || desiredCountCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field DesiredCount is of type int32")
		}
		desiredCountCopy := int32(desiredCountCopy0)
		res.DesiredCount = &desiredCountCopy
	}
	if r.ko.Spec.EnableECSManagedTags != nil {
		res.EnableECSManagedTags = r.ko.Spec.EnableECSManagedTags
	}
	if r.ko.Spec.EnableExecuteCommand != nil {
		res.EnableExecuteCommand = r.ko.Spec.EnableExecuteCommand
	}
	if r.ko.Spec.HealthCheckGracePeriodSeconds != nil {
		healthCheckGracePeriodSecondsCopy0 := *r.ko.Spec.HealthCheckGracePeriodSeconds
		if healthCheckGracePeriodSecondsCopy0 > math.MaxInt32 || healthCheckGracePeriodSecondsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field healthCheckGracePeriodSeconds is of type int32")
		}
		healthCheckGracePeriodSecondsCopy := int32(healthCheckGracePeriodSecondsCopy0)
		res.HealthCheckGracePeriodSeconds = &healthCheckGracePeriodSecondsCopy
	}
	if r.ko.Spec.LoadBalancers != nil {
		f9 := []svcsdktypes.LoadBalancer{}
		for _, f9iter := range r.ko.Spec.LoadBalancers {
			f9elem := &svcsdktypes.LoadBalancer{}
			if f9iter.ContainerName != nil {
				f9elem.ContainerName = f9iter.ContainerName
			}
			if f9iter.ContainerPort != nil {
				containerPortCopy0 := *f9iter.ContainerPort
				if containerPortCopy0 > math.MaxInt32 || containerPortCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field containerPort is of type int32")
				}
				containerPortCopy := int32(containerPortCopy0)
				f9elem.ContainerPort = &containerPortCopy
			}
			if f9iter.LoadBalancerName != nil {
				f9elem.LoadBalancerName = f9iter.LoadBalancerName
			}
			if f9iter.TargetGroupARN != nil {
				f9elem.TargetGroupArn = f9iter.TargetGroupARN
			}
			f9 = append(f9, *f9elem)
		}
		res.LoadBalancers = f9
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f10 := &svcsdktypes.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration != nil {
			f10f0 := &svcsdktypes.AwsVpcConfiguration{}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
				f10f0.AssignPublicIp = svcsdktypes.AssignPublicIp(*r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
				f10f0.SecurityGroups = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
				f10f0.Subnets = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets)
			}
			f10.AwsvpcConfiguration = f10f0
		}
		res.NetworkConfiguration = f10
	}
	if r.ko.Spec.PlacementConstraints != nil {
		f11 := []svcsdktypes.PlacementConstraint{}
		for _, f11iter := range r.ko.Spec.PlacementConstraints {
			f11elem := &svcsdktypes.PlacementConstraint{}
			if f11iter.Expression != nil {
				f11elem.Expression = f11iter.Expression
			}
			if f11iter.Type != nil {
				f11elem.Type = svcsdktypes.PlacementConstraintType(*f11iter.Type)
			}
			f11 = append(f11, *f11elem)
		}
		res.PlacementConstraints = f11
	}
	if r.ko.Spec.PlacementStrategy != nil {
		f12 := []svcsdktypes.PlacementStrategy{}
		for _, f12iter := range r.ko.Spec.PlacementStrategy {
			f12elem := &svcsdktypes.PlacementStrategy{}
			if f12iter.Field != nil {
				f12elem.Field = f12iter.Field
			}
			if f12iter.Type != nil {
				f12elem.Type = svcsdktypes.PlacementStrategyType(*f12iter.Type)
			}
			f12 = append(f12, *f12elem)
		}
		res.PlacementStrategy = f12
	}
	if r.ko.Spec.PlatformVersion != nil {
		res.PlatformVersion = r.ko.Spec.PlatformVersion
	}
	if r.ko.Spec.PropagateTags != nil {
		res.PropagateTags = svcsdktypes.PropagateTags(*r.ko.Spec.PropagateTags)
	}
	if r.ko.Spec.ServiceConnectConfiguration != nil {
		f16 := &svcsdktypes.ServiceConnectConfiguration{}
		if r.ko.Spec.ServiceConnectConfiguration.Enabled != nil {
			f16.Enabled = *r.ko.Spec.ServiceConnectConfiguration.Enabled
		}
		if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration != nil {
			f16f1 := &svcsdktypes.LogConfiguration{}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
				f16f1.LogDriver = svcsdktypes.LogDriver(*r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options != nil {
				f16f1.Options = aws.ToStringMap(r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
				f16f1f2 := []svcsdktypes.Secret{}
				for _, f16f1f2iter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
					f16f1f2elem := &svcsdktypes.Secret{}
					if f16f1f2iter.Name != nil {
						f16f1f2elem.Name = f16f1f2iter.Name
					}
					if f16f1f2iter.ValueFrom != nil {
						f16f1f2elem.ValueFrom = f16f1f2iter.ValueFrom
					}
					f16f1f2 = append(f16f1f2, *f16f1f2elem)
				}
				f16f1.SecretOptions = f16f1f2
			}
			f16.LogConfiguration = f16f1
		}
		if r.ko.Spec.ServiceConnectConfiguration.Namespace != nil {
			f16.Namespace = r.ko.Spec.ServiceConnectConfiguration.Namespace
		}
		if r.ko.Spec.ServiceConnectConfiguration.Services != nil {
			f16f3 := []svcsdktypes.ServiceConnectService{}
			for _, f16f3iter := range r.ko.Spec.ServiceConnectConfiguration.Services {
				f16f3elem := &svcsdktypes.ServiceConnectService{}
				if f16f3iter.ClientAliases != nil {
					f16f3elemf0 := []svcsdktypes.ServiceConnectClientAlias{}
					for _, f16f3elemf0iter := range f16f3iter.ClientAliases {
						f16f3elemf0elem := &svcsdktypes.ServiceConnectClientAlias{}
						if f16f3elemf0iter.DNSName != nil {
							f16f3elemf0elem.DnsName = f16f3elemf0iter.DNSName
						}
						if f16f3elemf0iter.Port != nil {
							portCopy0 := *f16f3elemf0iter.Port
							if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field port is of type int32")
							}
							portCopy := int32(portCopy0)
							f16f3elemf0elem.Port = &portCopy
						}
						f16f3elemf0 = append(f16f3elemf0, *f16f3elemf0elem)
					}
					f16f3elem.ClientAliases = f16f3elemf0
				}
				if f16f3iter.DiscoveryName != nil {
					f16f3elem.DiscoveryName = f16f3iter.DiscoveryName
				}
				if f16f3iter.IngressPortOverride != nil {
					ingressPortOverrideCopy0 := *f16f3iter.IngressPortOverride
					if ingressPortOverrideCopy0 > math.MaxInt32 || ingressPortOverrideCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field ingressPortOverride is of type int32")
					}
					ingressPortOverrideCopy := int32(ingressPortOverrideCopy0)
					f16f3elem.IngressPortOverride = &ingressPortOverrideCopy
				}
				if f16f3iter.PortName != nil {
					f16f3elem.PortName = f16f3iter.PortName
				}
				if f16f3iter.Timeout != nil {
					f16f3elemf4 := &svcsdktypes.TimeoutConfiguration{}
					if f16f3iter.Timeout.IdleTimeoutSeconds != nil {
						idleTimeoutSecondsCopy0 := *f16f3iter.Timeout.IdleTimeoutSeconds
						if idleTimeoutSecondsCopy0 > math.MaxInt32 || idleTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field idleTimeoutSeconds is of type int32")
						}
						idleTimeoutSecondsCopy := int32(idleTimeoutSecondsCopy0)
						f16f3elemf4.IdleTimeoutSeconds = &idleTimeoutSecondsCopy
					}
					if f16f3iter.Timeout.PerRequestTimeoutSeconds != nil {
						perRequestTimeoutSecondsCopy0 := *f16f3iter.Timeout.PerRequestTimeoutSeconds
						if perRequestTimeoutSecondsCopy0 > math.MaxInt32 || perRequestTimeoutSecondsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field perRequestTimeoutSeconds is of type int32")
						}
						perRequestTimeoutSecondsCopy := int32(perRequestTimeoutSecondsCopy0)
						f16f3elemf4.PerRequestTimeoutSeconds = &perRequestTimeoutSecondsCopy
					}
					f16f3elem.Timeout = f16f3elemf4
				}
				if f16f3iter.TLS != nil {
					f16f3elemf5 := &svcsdktypes.ServiceConnectTlsConfiguration{}
					if f16f3iter.TLS.IssuerCertificateAuthority != nil {
						f16f3elemf5f0 := &svcsdktypes.ServiceConnectTlsCertificateAuthority{}
						if f16f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN != nil {
							f16f3elemf5f0.AwsPcaAuthorityArn = f16f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN
						}
						f16f3elemf5.IssuerCertificateAuthority = f16f3elemf5f0
					}
					if f16f3iter.TLS.KMSKey != nil {
						f16f3elemf5.KmsKey = f16f3iter.TLS.KMSKey
					}
					if f16f3iter.TLS.RoleARN != nil {
						f16f3elemf5.RoleArn = f16f3iter.TLS.RoleARN
					}
					f16f3elem.Tls = f16f3elemf5
				}
				f16f3 = append(f16f3, *f16f3elem)
			}
			f16.Services = f16f3
		}
		res.ServiceConnectConfiguration = f16
	}
	if r.ko.Spec.ServiceRegistries != nil {
		f17 := []svcsdktypes.ServiceRegistry{}
		for _, f17iter := range r.ko.Spec.ServiceRegistries {
			f17elem := &svcsdktypes.ServiceRegistry{}
			if f17iter.ContainerName != nil {
				f17elem.ContainerName = f17iter.ContainerName
			}
			if f17iter.ContainerPort != nil {
				containerPortCopy0 := *f17iter.ContainerPort
				if containerPortCopy0 > math.MaxInt32 || containerPortCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field containerPort is of type int32")
				}
				containerPortCopy := int32(containerPortCopy0)
				f17elem.ContainerPort = &containerPortCopy
			}
			if f17iter.Port != nil {
				portCopy0 := *f17iter.Port
				if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field port is of type int32")
				}
				portCopy := int32(portCopy0)
				f17elem.Port = &portCopy
			}
			if f17iter.RegistryARN != nil {
				f17elem.RegistryArn = f17iter.RegistryARN
			}
			f17 = append(f17, *f17elem)
		}
		res.ServiceRegistries = f17
	}
	if r.ko.Spec.TaskDefinition != nil {
		res.TaskDefinition = r.ko.Spec.TaskDefinition
	}
	if r.ko.Spec.VolumeConfigurations != nil {
		f19 := []svcsdktypes.ServiceVolumeConfiguration{}
		for _, f19iter := range r.ko.Spec.VolumeConfigurations {
			f19elem := &svcsdktypes.ServiceVolumeConfiguration{}
			if f19iter.ManagedEBSVolume != nil {
				f19elemf0 := &svcsdktypes.ServiceManagedEBSVolumeConfiguration{}
				if f19iter.ManagedEBSVolume.Encrypted != nil {
					f19elemf0.Encrypted = f19iter.ManagedEBSVolume.Encrypted
				}
				if f19iter.ManagedEBSVolume.FilesystemType != nil {
					f19elemf0.FilesystemType = svcsdktypes.TaskFilesystemType(*f19iter.ManagedEBSVolume.FilesystemType)
				}
				if f19iter.ManagedEBSVolume.IOPS != nil {
					iopsCopy0 := *f19iter.ManagedEBSVolume.IOPS
					if iopsCopy0 > math.MaxInt32 || iopsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field iops is of type int32")
					}
					iopsCopy := int32(iopsCopy0)
					f19elemf0.Iops = &iopsCopy
				}
				if f19iter.ManagedEBSVolume.KMSKeyID != nil {
					f19elemf0.KmsKeyId = f19iter.ManagedEBSVolume.KMSKeyID
				}
				if f19iter.ManagedEBSVolume.RoleARN != nil {
					f19elemf0.RoleArn = f19iter.ManagedEBSVolume.RoleARN
				}
				if f19iter.ManagedEBSVolume.SizeInGiB != nil {
					sizeInGiBCopy0 := *f19iter.ManagedEBSVolume.SizeInGiB
					if sizeInGiBCopy0 > math.MaxInt32 || sizeInGiBCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field sizeInGiB is of type int32")
					}
					sizeInGiBCopy := int32(sizeInGiBCopy0)
					f19elemf0.SizeInGiB = &sizeInGiBCopy
				}
				if f19iter.ManagedEBSVolume.SnapshotID != nil {
					f19elemf0.SnapshotId = f19iter.ManagedEBSVolume.SnapshotID
				}
				if f19iter.ManagedEBSVolume.TagSpecifications != nil {
					f19elemf0f7 := []svcsdktypes.EBSTagSpecification{}
					for _, f19elemf0f7iter := range f19iter.ManagedEBSVolume.TagSpecifications {
						f19elemf0f7elem := &svcsdktypes.EBSTagSpecification{}
						if f19elemf0f7iter.PropagateTags != nil {
							f19elemf0f7elem.PropagateTags = svcsdktypes.PropagateTags(*f19elemf0f7iter.PropagateTags)
						}
						if f19elemf0f7iter.ResourceType != nil {
							f19elemf0f7elem.ResourceType = svcsdktypes.EBSResourceType(*f19elemf0f7iter.ResourceType)
						}
						if f19elemf0f7iter.Tags != nil {
							f19elemf0f7elemf2 := []svcsdktypes.Tag{}
							for _, f19elemf0f7elemf2iter := range f19elemf0f7iter.Tags {
								f19elemf0f7elemf2elem := &svcsdktypes.Tag{}
								if f19elemf0f7elemf2iter.Key != nil {
									f19elemf0f7elemf2elem.Key = f19elemf0f7elemf2iter.Key
								}
								if f19elemf0f7elemf2iter.Value != nil {
									f19elemf0f7elemf2elem.Value = f19elemf0f7elemf2iter.Value
								}
								f19elemf0f7elemf2 = append(f19elemf0f7elemf2, *f19elemf0f7elemf2elem)
							}
							f19elemf0f7elem.Tags = f19elemf0f7elemf2
						}
						f19elemf0f7 = append(f19elemf0f7, *f19elemf0f7elem)
					}
					f19elemf0.TagSpecifications = f19elemf0f7
				}
				if f19iter.ManagedEBSVolume.Throughput != nil {
					throughputCopy0 := *f19iter.ManagedEBSVolume.Throughput
					if throughputCopy0 > math.MaxInt32 || throughputCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field throughput is of type int32")
					}
					throughputCopy := int32(throughputCopy0)
					f19elemf0.Throughput = &throughputCopy
				}
				if f19iter.ManagedEBSVolume.VolumeType != nil {
					f19elemf0.VolumeType = f19iter.ManagedEBSVolume.VolumeType
				}
				f19elem.ManagedEBSVolume = f19elemf0
			}
			if f19iter.Name != nil {
				f19elem.Name = f19iter.Name
			}
			f19 = append(f19, *f19elem)
		}
		res.VolumeConfigurations = f19
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if r.ko.Spec.DesiredCount != nil && *r.ko.Spec.DesiredCount > 0 {
		_, err := rm.sdkapi.UpdateService(ctx, &svcsdk.UpdateServiceInput{
			Service:      r.ko.Spec.Name,
			Cluster:      r.ko.Spec.Cluster,
			DesiredCount: aws.Int32(0),
		})
		rm.metrics.RecordAPICall("UPDATE", "UpdateService", err)
		if err != nil {
			return nil, err
		}
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if r.ko.Spec.Name != nil {
		input.Service = r.ko.Spec.Name
	}
	var resp *svcsdk.DeleteServiceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteService(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteService", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteServiceInput, error) {
	res := &svcsdk.DeleteServiceInput{}

	if r.ko.Spec.Cluster != nil {
		res.Cluster = r.ko.Spec.Cluster
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Service,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterException":
		return true
	default:
		return false
	}
}
