---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  name: taskdefinitions.ecs.services.k8s.aws
spec:
  group: ecs.services.k8s.aws
  names:
    kind: TaskDefinition
    listKind: TaskDefinitionList
    plural: taskdefinitions
    singular: taskdefinition
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.family
      name: FAMILY
      type: string
    - jsonPath: .spec.cpu
      name: CPU
      type: string
    - jsonPath: .spec.memory
      name: MEMORY
      type: string
    - jsonPath: .spec.networkMode
      name: NETWORKMODE
      type: string
    - jsonPath: .status.conditions[?(@.type=="ACK.ResourceSynced")].status
      name: Synced
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TaskDefinition is the Schema for the TaskDefinitions API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              TaskDefinitionSpec defines the desired state of TaskDefinition.

              The details of a task definition which describes the container and volume
              definitions of an Amazon Elastic Container Service task. You can specify
              which Docker images to use, the required resources, and other configurations
              related to launching the task definition through an Amazon ECS service or
              task.
            properties:
              containerDefinitions:
                items:
                  description: |-
                    Container definitions are used in task definitions to describe the different
                    containers that are launched as part of a task.
                  properties:
                    command:
                      items:
                        type: string
                      type: array
                    cpu:
                      format: int64
                      type: integer
                    credentialSpecs:
                      items:
                        type: string
                      type: array
                    dependsOn:
                      items:
                        description: |-
                          The dependencies defined for container startup and shutdown. A container
                          can contain multiple dependencies. When a dependency is defined for container
                          startup, for container shutdown it is reversed.

                          Your Amazon ECS container instances require at least version 1.26.0 of the
                          container agent to use container dependencies. However, we recommend using
                          the latest container agent version. For information about checking your agent
                          version and updating to the latest version, see Updating the Amazon ECS Container
                          Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html)
                          in the Amazon Elastic Container Service Developer Guide. If you're using
                          an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1
                          of the ecs-init package. If your container instances are launched from version
                          20190301 or later, then they contain the required versions of the container
                          agent and ecs-init. For more information, see Amazon ECS-optimized Linux
                          AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
                          in the Amazon Elastic Container Service Developer Guide.

                          For tasks that use the Fargate launch type, the task or service requires
                          the following platforms:

                            - Linux platform version 1.3.0 or later.

                            - Windows platform version 1.0.0 or later.

                          For more information about how to create a container dependency, see Container
                          dependency (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/example_task_definitions.html#example_task_definition-containerdependency)
                          in the Amazon Elastic Container Service Developer Guide.
                        properties:
                          condition:
                            type: string
                          containerName:
                            type: string
                        type: object
                      type: array
                    disableNetworking:
                      type: boolean
                    dnsSearchDomains:
                      items:
                        type: string
                      type: array
                    dnsServers:
                      items:
                        type: string
                      type: array
                    dockerLabels:
                      additionalProperties:
                        type: string
                      type: object
                    dockerSecurityOptions:
                      items:
                        type: string
                      type: array
                    entryPoint:
                      items:
                        type: string
                      type: array
                    environment:
                      items:
                        description: A key-value pair object.
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    environmentFiles:
                      items:
                        description: |-
                          A list of files containing the environment variables to pass to a container.
                          You can specify up to ten environment files. The file must have a .env file
                          extension. Each line in an environment file should contain an environment
                          variable in VARIABLE=VALUE format. Lines beginning with # are treated as
                          comments and are ignored.

                          If there are environment variables specified using the environment parameter
                          in a container definition, they take precedence over the variables contained
                          within an environment file. If multiple environment files are specified that
                          contain the same variable, they're processed from the top down. We recommend
                          that you use unique variable names. For more information, see Use a file
                          to pass environment variables to a container (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html)
                          in the Amazon Elastic Container Service Developer Guide.

                          Environment variable files are objects in Amazon S3 and all Amazon S3 security
                          considerations apply.

                          You must use the following platforms for the Fargate launch type:

                            - Linux platform version 1.4.0 or later.

                            - Windows platform version 1.0.0 or later.

                          Consider the following when using the Fargate launch type:

                            - The file is handled like a native Docker env-file.

                            - There is no support for shell escape handling.

                            - The container entry point interperts the VARIABLE values.
                        properties:
                          type:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    essential:
                      type: boolean
                    extraHosts:
                      items:
                        description: |-
                          Hostnames and IP address entries that are added to the /etc/hosts file of
                          a container via the extraHosts parameter of its ContainerDefinition (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).
                        properties:
                          hostname:
                            type: string
                          ipAddress:
                            type: string
                        type: object
                      type: array
                    firelensConfiguration:
                      description: |-
                        The FireLens configuration for the container. This is used to specify and
                        configure a log router for container logs. For more information, see Custom
                        log routing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
                        in the Amazon Elastic Container Service Developer Guide.
                      properties:
                        options:
                          additionalProperties:
                            type: string
                          type: object
                        type:
                          type: string
                      type: object
                    healthCheck:
                      description: |-
                        An object representing a container health check. Health check parameters
                        that are specified in a container definition override any Docker health checks
                        that exist in the container image (such as those specified in a parent image
                        or from the image's Dockerfile). This configuration maps to the HEALTHCHECK
                        parameter of docker run.

                        The Amazon ECS container agent only monitors and reports on the health checks
                        specified in the task definition. Amazon ECS does not monitor Docker health
                        checks that are embedded in a container image and not specified in the container
                        definition. Health check parameters that are specified in a container definition
                        override any Docker health checks that exist in the container image.

                        You can view the health status of both individual containers and a task with
                        the DescribeTasks API operation or when viewing the task details in the console.

                        The health check is designed to make sure that your containers survive agent
                        restarts, upgrades, or temporary unavailability.

                        Amazon ECS performs health checks on containers with the default that launched
                        the container instance or the task.

                        The following describes the possible healthStatus values for a container:

                           * HEALTHY-The container health check has passed successfully.

                           * UNHEALTHY-The container health check has failed.

                           * UNKNOWN-The container health check is being evaluated, there's no container
                           health check defined, or Amazon ECS doesn't have the health status of
                           the container.

                        The following describes the possible healthStatus values based on the container
                        health checker status of essential containers in the task with the following
                        priority order (high to low):

                           * UNHEALTHY-One or more essential containers have failed their health
                           check.

                           * UNKNOWN-Any essential container running within the task is in an UNKNOWN
                           state and no other essential containers have an UNHEALTHY state.

                           * HEALTHY-All essential containers within the task have passed their health
                           checks.

                        Consider the following task health example with 2 containers.

                           * If Container1 is UNHEALTHY and Container2 is UNKNOWN, the task health
                           is UNHEALTHY.

                           * If Container1 is UNHEALTHY and Container2 is HEALTHY, the task health
                           is UNHEALTHY.

                           * If Container1 is HEALTHY and Container2 is UNKNOWN, the task health
                           is UNKNOWN.

                           * If Container1 is HEALTHY and Container2 is HEALTHY, the task health
                           is HEALTHY.

                        Consider the following task health example with 3 containers.

                           * If Container1 is UNHEALTHY and Container2 is UNKNOWN, and Container3
                           is UNKNOWN, the task health is UNHEALTHY.

                           * If Container1 is UNHEALTHY and Container2 is UNKNOWN, and Container3
                           is HEALTHY, the task health is UNHEALTHY.

                           * If Container1 is UNHEALTHY and Container2 is HEALTHY, and Container3
                           is HEALTHY, the task health is UNHEALTHY.

                           * If Container1 is HEALTHY and Container2 is UNKNOWN, and Container3 is
                           HEALTHY, the task health is UNKNOWN.

                           * If Container1 is HEALTHY and Container2 is UNKNOWN, and Container3 is
                           UNKNOWN, the task health is UNKNOWN.

                           * If Container1 is HEALTHY and Container2 is HEALTHY, and Container3 is
                           HEALTHY, the task health is HEALTHY.

                        If a task is run manually, and not as part of a service, the task will continue
                        its lifecycle regardless of its health status. For tasks that are part of
                        a service, if the task reports as unhealthy then the task will be stopped
                        and the service scheduler will replace it.

                        The following are notes about container health check support:

                           * If the Amazon ECS container agent becomes disconnected from the Amazon
                           ECS service, this won't cause a container to transition to an UNHEALTHY
                           status. This is by design, to ensure that containers remain running during
                           agent restarts or temporary unavailability. The health check status is
                           the "last heard from" response from the Amazon ECS agent, so if the container
                           was considered HEALTHY prior to the disconnect, that status will remain
                           until the agent reconnects and another health check occurs. There are
                           no assumptions made about the status of the container health checks.

                           * Container health checks require version 1.17.0 or greater of the Amazon
                           ECS container agent. For more information, see Updating the Amazon ECS
                           container agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).

                           * Container health checks are supported for Fargate tasks if you're using
                           platform version 1.1.0 or greater. For more information, see Fargate platform
                           versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).

                           * Container health checks aren't supported for tasks that are part of
                           a service that's configured to use a Classic Load Balancer.
                      properties:
                        command:
                          items:
                            type: string
                          type: array
                        interval:
                          format: int64
                          type: integer
                        retries:
                          format: int64
                          type: integer
                        startPeriod:
                          format: int64
                          type: integer
                        timeout:
                          format: int64
                          type: integer
                      type: object
                    hostname:
                      type: string
                    image:
                      type: string
                    interactive:
                      type: boolean
                    links:
                      items:
                        type: string
                      type: array
                    linuxParameters:
                      description: |-
                        The Linux-specific options that are applied to the container, such as Linux
                        KernelCapabilities (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
                      properties:
                        capabilities:
                          description: |-
                            The Linux capabilities to add or remove from the default Docker configuration
                            for a container defined in the task definition. For more detailed information
                            about these Linux capabilities, see the capabilities(7) (http://man7.org/linux/man-pages/man7/capabilities.7.html)
                            Linux manual page.
                          properties:
                            add:
                              items:
                                type: string
                              type: array
                            drop:
                              items:
                                type: string
                              type: array
                          type: object
                        devices:
                          items:
                            description: An object representing a container instance
                              host device.
                            properties:
                              containerPath:
                                type: string
                              hostPath:
                                type: string
                              permissions:
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        initProcessEnabled:
                          type: boolean
                        maxSwap:
                          format: int64
                          type: integer
                        sharedMemorySize:
                          format: int64
                          type: integer
                        swappiness:
                          format: int64
                          type: integer
                        tmpfs:
                          items:
                            description: The container path, mount options, and size
                              of the tmpfs mount.
                            properties:
                              containerPath:
                                type: string
                              mountOptions:
                                items:
                                  type: string
                                type: array
                              size:
                                format: int64
                                type: integer
                            type: object
                          type: array
                      type: object
                    logConfiguration:
                      description: |-
                        The log configuration for the container. This parameter maps to LogConfig
                        in the docker container create command and the --log-driver option to docker
                        run.

                        By default, containers use the same logging driver that the Docker daemon
                        uses. However, the container might use a different logging driver than the
                        Docker daemon by specifying a log driver configuration in the container definition.

                        Understand the following when specifying a log configuration for your containers.

                           * Amazon ECS currently supports a subset of the logging drivers available
                           to the Docker daemon. Additional log drivers may be available in future
                           releases of the Amazon ECS container agent. For tasks on Fargate, the
                           supported log drivers are awslogs, splunk, and awsfirelens. For tasks
                           hosted on Amazon EC2 instances, the supported log drivers are awslogs,
                           fluentd, gelf, json-file, journald,syslog, splunk, and awsfirelens.

                           * This parameter requires version 1.18 of the Docker Remote API or greater
                           on your container instance.

                           * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container
                           agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
                           environment variable before containers placed on that instance can use
                           these log configuration options. For more information, see Amazon ECS
                           container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
                           in the Amazon Elastic Container Service Developer Guide.

                           * For tasks that are on Fargate, because you don't have access to the
                           underlying infrastructure your tasks are hosted on, any additional software
                           needed must be installed outside of the task. For example, the Fluentd
                           output aggregators or a remote host running Logstash to send Gelf logs
                           to.
                      properties:
                        logDriver:
                          type: string
                        options:
                          additionalProperties:
                            type: string
                          type: object
                        secretOptions:
                          items:
                            description: |-
                              An object representing the secret to expose to your container. Secrets can
                              be exposed to a container in the following ways:

                                - To inject sensitive data into your containers as environment variables,
                                  use the secrets container definition parameter.

                                - To reference sensitive information in the log configuration of a container,
                                  use the secretOptions container definition parameter.

                              For more information, see Specifying sensitive data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
                              in the Amazon Elastic Container Service Developer Guide.
                            properties:
                              name:
                                type: string
                              valueFrom:
                                type: string
                            type: object
                          type: array
                      type: object
                    memory:
                      format: int64
                      type: integer
                    memoryReservation:
                      format: int64
                      type: integer
                    mountPoints:
                      items:
                        description: The details for a volume mount point that's used
                          in a container definition.
                        properties:
                          containerPath:
                            type: string
                          readOnly:
                            type: boolean
                          sourceVolume:
                            type: string
                        type: object
                      type: array
                    name:
                      type: string
                    portMappings:
                      items:
                        description: |-
                          Port mappings allow containers to access ports on the host container instance
                          to send or receive traffic. Port mappings are specified as part of the container
                          definition.

                          If you use containers in a task with the awsvpc or host network mode, specify
                          the exposed ports using containerPort. The hostPort can be left blank or
                          it must be the same value as the containerPort.

                          Most fields of this parameter (containerPort, hostPort, protocol) maps to
                          PortBindings in the docker container create command and the --publish option
                          to docker run. If the network mode of a task definition is set to host, host
                          ports must either be undefined or match the container port in the port mapping.

                          You can't expose the same container port for multiple protocols. If you attempt
                          this, an error is returned.

                          After a task reaches the RUNNING status, manual and automatic host and container
                          port assignments are visible in the networkBindings section of DescribeTasks
                          (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html)
                          API responses.
                        properties:
                          appProtocol:
                            type: string
                          containerPort:
                            format: int64
                            type: integer
                          containerPortRange:
                            type: string
                          hostPort:
                            format: int64
                            type: integer
                          name:
                            type: string
                          protocol:
                            type: string
                        type: object
                      type: array
                    privileged:
                      type: boolean
                    pseudoTerminal:
                      type: boolean
                    readonlyRootFilesystem:
                      type: boolean
                    repositoryCredentials:
                      description: The repository credentials for private registry
                        authentication.
                      properties:
                        credentialsParameter:
                          type: string
                      type: object
                    resourceRequirements:
                      items:
                        description: |-
                          The type and amount of a resource to assign to a container. The supported
                          resource types are GPUs and Elastic Inference accelerators. For more information,
                          see Working with GPUs on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html)
                          or Working with Amazon Elastic Inference on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html)
                          in the Amazon Elastic Container Service Developer Guide
                        properties:
                          type:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    secrets:
                      items:
                        description: |-
                          An object representing the secret to expose to your container. Secrets can
                          be exposed to a container in the following ways:

                            - To inject sensitive data into your containers as environment variables,
                              use the secrets container definition parameter.

                            - To reference sensitive information in the log configuration of a container,
                              use the secretOptions container definition parameter.

                          For more information, see Specifying sensitive data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
                          in the Amazon Elastic Container Service Developer Guide.
                        properties:
                          name:
                            type: string
                          valueFrom:
                            type: string
                        type: object
                      type: array
                    startTimeout:
                      format: int64
                      type: integer
                    stopTimeout:
                      format: int64
                      type: integer
                    systemControls:
                      items:
                        description: |-
                          A list of namespaced kernel parameters to set in the container. This parameter
                          maps to Sysctls in the docker container create command and the --sysctl option
                          to docker run. For example, you can configure net.ipv4.tcp_keepalive_time
                          setting to maintain longer lived connections.

                          We don't recommend that you specify network-related systemControls parameters
                          for multiple containers in a single task that also uses either the awsvpc
                          or host network mode. Doing this has the following disadvantages:

                            - For tasks that use the awsvpc network mode including Fargate, if you
                              set systemControls for any container, it applies to all containers in
                              the task. If you set different systemControls for multiple containers
                              in a single task, the container that's started last determines which systemControls
                              take effect.

                            - For tasks that use the host network mode, the network namespace systemControls
                              aren't supported.

                          If you're setting an IPC resource namespace to use for the containers in
                          the task, the following conditions apply to your system controls. For more
                          information, see IPC mode (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).

                            - For tasks that use the host IPC mode, IPC namespace systemControls aren't
                              supported.

                            - For tasks that use the task IPC mode, IPC namespace systemControls values
                              apply to all containers within a task.

                          This parameter is not supported for Windows containers.

                          This parameter is only supported for tasks that are hosted on Fargate if
                          the tasks are using platform version 1.4.0 or later (Linux). This isn't supported
                          for Windows containers on Fargate.
                        properties:
                          namespace:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    ulimits:
                      items:
                        description: |-
                          The ulimit settings to pass to the container.

                          Amazon ECS tasks hosted on Fargate use the default resource limit values
                          set by the operating system with the exception of the nofile resource limit
                          parameter which Fargate overrides. The nofile resource limit sets a restriction
                          on the number of open files that a container can use. The default nofile
                          soft limit is 65535 and the default hard limit is 65535.

                          You can specify the ulimit settings for a container in a task definition.
                        properties:
                          hardLimit:
                            format: int64
                            type: integer
                          name:
                            type: string
                          softLimit:
                            format: int64
                            type: integer
                        type: object
                      type: array
                    user:
                      type: string
                    volumesFrom:
                      items:
                        description: Details on a data volume from another container
                          in the same task definition.
                        properties:
                          readOnly:
                            type: boolean
                          sourceContainer:
                            type: string
                        type: object
                      type: array
                    workingDirectory:
                      type: string
                  type: object
                type: array
              cpu:
                type: string
              ephemeralStorage:
                description: |-
                  The amount of ephemeral storage to allocate for the task. This parameter
                  is used to expand the total amount of ephemeral storage available, beyond
                  the default amount, for tasks hosted on Fargate. For more information, see
                  Using data volumes in tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html)
                  in the Amazon ECS Developer Guide;.

                  For tasks using the Fargate launch type, the task requires the following
                  platforms:

                    - Linux platform version 1.4.0 or later.

                    - Windows platform version 1.0.0 or later.
                properties:
                  sizeInGiB:
                    format: int64
                    type: integer
                type: object
              executionRoleARN:
                type: string
              family:
                type: string
              inferenceAccelerators:
                items:
                  description: |-
                    Details on an Elastic Inference accelerator. For more information, see Working
                    with Amazon Elastic Inference on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html)
                    in the Amazon Elastic Container Service Developer Guide.
                  properties:
                    deviceName:
                      type: string
                    deviceType:
                      type: string
                  type: object
                type: array
              ipcMode:
                type: string
              memory:
                type: string
              networkMode:
                type: string
              pidMode:
                type: string
              placementConstraints:
                items:
                  description: |-
                    The constraint on task placement in the task definition. For more information,
                    see Task placement constraints (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html)
                    in the Amazon Elastic Container Service Developer Guide.

                    Task placement constraints aren't supported for tasks run on Fargate.
                  properties:
                    expression:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              proxyConfiguration:
                description: |-
                  The configuration details for the App Mesh proxy.

                  For tasks that use the EC2 launch type, the container instances require at
                  least version 1.26.0 of the container agent and at least version 1.26.0-1
                  of the ecs-init package to use a proxy configuration. If your container instances
                  are launched from the Amazon ECS optimized AMI version 20190301 or later,
                  then they contain the required versions of the container agent and ecs-init.
                  For more information, see Amazon ECS-optimized Linux AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
                properties:
                  containerName:
                    type: string
                  properties:
                    items:
                      description: A key-value pair object.
                      properties:
                        name:
                          type: string
                        value:
                          type: string
                      type: object
                    type: array
                  type:
                    type: string
                type: object
              requiresCompatibilities:
                items:
                  type: string
                type: array
              runtimePlatform:
                description: |-
                  Information about the platform for the Amazon ECS service or task.

                  For more information about RuntimePlatform, see RuntimePlatform (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
                  in the Amazon Elastic Container Service Developer Guide.
                properties:
                  cpuArchitecture:
                    type: string
                  operatingSystemFamily:
                    type: string
                type: object
              tags:
                items:
                  description: |-
                    The metadata that you apply to a resource to help you categorize and organize
                    them. Each tag consists of a key and an optional value. You define them.

                    The following basic restrictions apply to tags:

                      - Maximum number of tags per resource - 50

                      - For each resource, each tag key must be unique, and each tag key can
                        have only one value.

                      - Maximum key length - 128 Unicode characters in UTF-8

                      - Maximum value length - 256 Unicode characters in UTF-8

                      - If your tagging schema is used across multiple services and resources,
                        remember that other services may have restrictions on allowed characters.
                        Generally allowed characters are: letters, numbers, and spaces representable
                        in UTF-8, and the following characters: + - = . _ : / @.

                      - Tag keys and values are case-sensitive.

                      - Do not use aws:, AWS:, or any upper or lowercase combination of such
                        as a prefix for either keys or values as it is reserved for Amazon Web
                        Services use. You cannot edit or delete tag keys or values with this prefix.
                        Tags with this prefix do not count against your tags per resource limit.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              taskRoleARN:
                type: string
              taskRoleRef:
                description: "AWSResourceReferenceWrapper provides a wrapper around
                  *AWSResourceReference\ntype to provide more user friendly syntax
                  for references using 'from' field\nEx:\nAPIIDRef:\n\n\tfrom:\n\t
                  \ name: my-api"
                properties:
                  from:
                    description: |-
                      AWSResourceReference provides all the values necessary to reference another
                      k8s resource for finding the identifier(Id/ARN/Name)
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                type: object
              volumes:
                items:
                  description: |-
                    The data volume configuration for tasks launched using this task definition.
                    Specifying a volume configuration in a task definition is optional. The volume
                    configuration may contain multiple volumes but only one volume configured
                    at launch is supported. Each volume defined in the volume configuration may
                    only specify a name and one of either configuredAtLaunch, dockerVolumeConfiguration,
                    efsVolumeConfiguration, fsxWindowsFileServerVolumeConfiguration, or host.
                    If an empty volume configuration is specified, by default Amazon ECS uses
                    a host volume. For more information, see Using data volumes in tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
                  properties:
                    configuredAtLaunch:
                      type: boolean
                    dockerVolumeConfiguration:
                      description: |-
                        This parameter is specified when you're using Docker volumes. Docker volumes
                        are only supported when you're using the EC2 launch type. Windows containers
                        only support the use of the local driver. To use bind mounts, specify a host
                        instead.
                      properties:
                        autoprovision:
                          type: boolean
                        driver:
                          type: string
                        driverOpts:
                          additionalProperties:
                            type: string
                          type: object
                        labels:
                          additionalProperties:
                            type: string
                          type: object
                        scope:
                          type: string
                      type: object
                    efsVolumeConfiguration:
                      description: |-
                        This parameter is specified when you're using an Amazon Elastic File System
                        file system for task storage. For more information, see Amazon EFS volumes
                        (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html)
                        in the Amazon Elastic Container Service Developer Guide.
                      properties:
                        authorizationConfig:
                          description: The authorization configuration details for
                            the Amazon EFS file system.
                          properties:
                            accessPointID:
                              type: string
                            iam:
                              type: string
                          type: object
                        fileSystemID:
                          type: string
                        rootDirectory:
                          type: string
                        transitEncryption:
                          type: string
                        transitEncryptionPort:
                          format: int64
                          type: integer
                      type: object
                    fsxWindowsFileServerVolumeConfiguration:
                      description: |-
                        This parameter is specified when you're using Amazon FSx for Windows File
                        Server (https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html)
                        file system for task storage.

                        For more information and the input format, see Amazon FSx for Windows File
                        Server volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
                        in the Amazon Elastic Container Service Developer Guide.
                      properties:
                        authorizationConfig:
                          description: |-
                            The authorization configuration details for Amazon FSx for Windows File Server
                            file system. See FSxWindowsFileServerVolumeConfiguration (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html)
                            in the Amazon ECS API Reference.

                            For more information and the input format, see Amazon FSx for Windows File
                            Server Volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
                            in the Amazon Elastic Container Service Developer Guide.
                          properties:
                            credentialsParameter:
                              type: string
                            domain:
                              type: string
                          type: object
                        fileSystemID:
                          type: string
                        rootDirectory:
                          type: string
                      type: object
                    host:
                      description: Details on a container instance bind mount host
                        volume.
                      properties:
                        sourcePath:
                          type: string
                      type: object
                    name:
                      type: string
                  type: object
                type: array
            required:
            - containerDefinitions
            - family
            type: object
          status:
            description: TaskDefinitionStatus defines the observed state of TaskDefinition
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              compatibilities:
                description: |-
                  Amazon ECS validates the task definition parameters with those supported
                  by the launch type. For more information, see Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
                  in the Amazon Elastic Container Service Developer Guide.
                items:
                  type: string
                type: array
              conditions:
                description: |-
                  All CRs managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              deregisteredAt:
                description: The Unix timestamp for the time when the task definition
                  was deregistered.
                format: date-time
                type: string
              registeredAt:
                description: The Unix timestamp for the time when the task definition
                  was registered.
                format: date-time
                type: string
              registeredBy:
                description: The principal that registered the task definition.
                type: string
              requiresAttributes:
                description: |-
                  The container instance attributes required by your task. When an Amazon EC2
                  instance is registered to your cluster, the Amazon ECS container agent assigns
                  some standard attributes to the instance. You can apply custom attributes.
                  These are specified as key-value pairs using the Amazon ECS console or the
                  PutAttributes (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAttributes.html)
                  API. These attributes are used when determining task placement for tasks
                  hosted on Amazon EC2 instances. For more information, see Attributes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes)
                  in the Amazon Elastic Container Service Developer Guide.

                  This parameter isn't supported for tasks run on Fargate.
                items:
                  description: |-
                    An attribute is a name-value pair that's associated with an Amazon ECS object.
                    Use attributes to extend the Amazon ECS data model by adding custom metadata
                    to your resources. For more information, see Attributes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes)
                    in the Amazon Elastic Container Service Developer Guide.
                  properties:
                    name:
                      type: string
                    targetID:
                      type: string
                    targetType:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              revision:
                description: |-
                  The revision of the task in a particular family. The revision is a version
                  number of a task definition in a family. When you register a task definition
                  for the first time, the revision is 1. Each time that you register a new
                  revision of a task definition in the same family, the revision value always
                  increases by one. This is even if you deregistered previous revisions in
                  this family.
                format: int64
                type: integer
              status:
                description: The status of the task definition.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
